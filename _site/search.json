[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Seminar Medienbasierte Wissenskonstruktion: R - Website",
    "section": "",
    "text": "Seminar Medienbasierte Wissenskonstruktion: R\nHier werden ab dem 12.04. mehr Infos stehen."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Download & Installation von R",
    "section": "",
    "text": "In Folgenden erklären wir, wie ihr euch R und RStudio herunterladen könnt. Zwar gibt es im Web einige How-Tos und Tutorials, wir wollen euch an dieser Stelle der Vollständigkeit halber aber nochmal vermitteln, wie genau ihr euch die Software installiert und was es dabei zu beachten gibt. Falls während der Installation Fragen aufkommen, meldet euch gerne per Mail bei uns (simon.krukowski@stud.uni-due.de) oder schaut einfach im Web nach How-Tos/Troubleshooting. Das ist generell auch eine gute Idee beim Thema R, Programmieren & Datenanalyse - mehr dazu erfahrt ihr dann im Seminar.\n\nÜberblick\nDa dein Computer R als Programmiersprache nicht von selbst versteht, musst du R zunächst installieren. Sobald du R installiert hast, kannst du es theoretisch benutzen, und Daten damit auswerten. Hierbei ist wichtig zu differenzieren, dass du R zwar in der Kommandozeile/Terminal verwenden kannst, dies aber wenig intuitiv ist. Links in Figure 1 ist bspw. zu sehen, wir wir R in der Kommandozeile nutzen.\n\n\n\nFigure 1: R & Rstudio\n\n\nTrotzdem ist das wenig intuitiv. Daher bietet es sich an, eine IDE (Entwicklungsumgebung, siehe hier) zu benutzen. Die populärste IDE dafür ist RStudio. Im Rahmen dieses Seminars werden wir mit RStudio arbeiten. Wie du beides installierst, erfährst du in diesem Notebook.\n\n\nDownload & Installation\nStarten wir also mit dem Download. Besuche folgende Website:\n\n\n\nFigure 2: posit.co\n\n\nWenn du dem Link folgst, wirst du auf die offzielle Seite von R (CRAN) weitergeleitet, und kannst dir dort die für dein System richtige Version auswählen:\n\n\n\nFigure 3: CRAN\n\n\nIn unserem Fall haben wir einen Mac, und wählen den entsprechenden Link aus. Auf der folgenden Seite gibt es viele verschiedene Links, hier ist es wichtig den bei latest release und für euer System richtigen zu nehmen (in unserem Fall Intel Mac).\n\n\n\nFigure 4: CRAN\n\n\nNach dem Download könnt ihr den Installer ausführen und voilà - ihr habt R installiert! Da bei uns R schon installiert ist gibt es hier leider keinen Screenshot.\nTheoretisch könntet ihr R nun wie oben beschrieben in der Kommandozeile verwenden. Wir wollen allerdings RStudio benutzen, also gehen wir wieder zurück zu posit.co und laden dort die richtige Version für unser System herunter (die richtige Version wird hier automatisch vorgeschlagen):\n\n\n\nFigure 5: posit.co\n\n\nJe nach System unterscheidet sich hier die Installation etwas, aber am Ende sollte RStudio bei dir installiert sein. Öffnet also R, und es sollte etwa wie folgt aussehen:\n\n\n\nFigure 6: So sollte RStudio aussehen\n\n\n\n\nR-Skripte ausführen\nAls erste Übung wollen wir ein Test-Skript ausführen. Ladet euch das Skript zunächst herunter:\n R Skript \nÖffnet das Skript durch einen Doppelklick mit RStudio und führt es aus. Wenn ihr alles richtig gemacht habt, sollte etwas in der Konsole erscheinen. Diesen Output werden wir in der ersten Seminarstunde besprechen.\n\n\nTroubleshooting\nHaben sich bei der Installation Probleme ergeben? Meldet euch gerne per Mail an simon.krukowski@stud.uni-due.de."
  },
  {
    "objectID": "folien/12.04.23.html#vorstellungsrunde",
    "href": "folien/12.04.23.html#vorstellungsrunde",
    "title": "12.04.23",
    "section": "Vorstellungsrunde",
    "text": "Vorstellungsrunde\n\nWer sind wir?\nWer seid ihr? Semester..,"
  },
  {
    "objectID": "folien/12.04.23.html#ziele-des-seminars",
    "href": "folien/12.04.23.html#ziele-des-seminars",
    "title": "12.04.23",
    "section": "Ziele des Seminars",
    "text": "Ziele des Seminars\n\nDaten einlesen, bearbeiten, grafisch darstellen und statistisch auswerten\nEinblick in Breite und Tiefe, die R bietet\nGrundlagen schaffen, auf die ihr selbstständig aufbauen könnt (z.B. für Masterarbeit oder eigene Projekte)"
  },
  {
    "objectID": "folien/12.04.23.html#zeitplan",
    "href": "folien/12.04.23.html#zeitplan",
    "title": "12.04.23",
    "section": "Zeitplan",
    "text": "Zeitplan\n\n7-8 Sitzungen, die jeweils 3h dauern\n31.05 vrsl. letzte, kürzere Sitzung\nInhaltlich: Basics, Deskriptives, Inferenzstatistik, Auswertung von Forschungs daten\ninnerhalb der Sitzung: abwechselnd Blöcke von Theorie + Praxis"
  },
  {
    "objectID": "folien/12.04.23.html#prüfungsleistung",
    "href": "folien/12.04.23.html#prüfungsleistung",
    "title": "12.04.23",
    "section": "Prüfungsleistung",
    "text": "Prüfungsleistung\n\nWöchentliche “Hausaufgaben”: Wiederholen und erweitern das im Seminar Gelernte\n\n\nAbgabe per Moodle\nwerden benotet, am Ende per Durchschnitt zusammengefasst und machen gemeinsam 50% der Note aus\nAbgabe mit der schlechtesten Benotung wird aus der Durchschnittsberechnung entfernt\nEinzelarbeit!\n\n\n1x Hausaufgabe vorstellen\nBericht zu (neuem) Datensatz einreichen\n\nEs gibt keine Anwesenheitspflicht, wir empfehlen aber immer da zu sein, da euch die Prüfungsleistungen dann leichter fallen werden."
  },
  {
    "objectID": "folien/12.04.23.html#user-interface",
    "href": "folien/12.04.23.html#user-interface",
    "title": "12.04.23",
    "section": "User Interface",
    "text": "User Interface"
  },
  {
    "objectID": "folien/12.04.23.html#codetest",
    "href": "folien/12.04.23.html#codetest",
    "title": "12.04.23",
    "section": "Codetest",
    "text": "Codetest\n\n\n[1] 2"
  },
  {
    "objectID": "folien/120423.html#vorstellungsrunde",
    "href": "folien/120423.html#vorstellungsrunde",
    "title": "12.04.23",
    "section": "Vorstellungsrunde",
    "text": "Vorstellungsrunde\n\nWer sind wir?\nWer seid ihr? Semester..,"
  },
  {
    "objectID": "folien/120423.html#ziele-des-seminars",
    "href": "folien/120423.html#ziele-des-seminars",
    "title": "12.04.23",
    "section": "Ziele des Seminars",
    "text": "Ziele des Seminars\n\nDaten einlesen, bearbeiten, grafisch darstellen und statistisch auswerten\nEinblick in Breite und Tiefe, die R bietet\nGrundlagen schaffen, auf die ihr selbstständig aufbauen könnt (z.B. für Masterarbeit oder eigene Projekte)"
  },
  {
    "objectID": "folien/120423.html#zeitplan",
    "href": "folien/120423.html#zeitplan",
    "title": "12.04.23",
    "section": "Zeitplan",
    "text": "Zeitplan\n\n7-8 Sitzungen, die jeweils 3h dauern\n31.05 vrsl. letzte, kürzere Sitzung\nInhaltlich: Basics, Deskriptives, Inferenzstatistik, Auswertung von Forschungs daten\ninnerhalb der Sitzung: abwechselnd Blöcke von Theorie + Praxis\nWebsite für Präsentationsinhalte, Lösungen, Cheatsheets usw. (selbst Notizen machen lohnt sich auch!)"
  },
  {
    "objectID": "folien/120423.html#prüfungsleistung",
    "href": "folien/120423.html#prüfungsleistung",
    "title": "12.04.23",
    "section": "Prüfungsleistung",
    "text": "Prüfungsleistung\n\nWöchentliche “Hausaufgaben”: Wiederholen und erweitern das im Seminar Gelernte\n\n\nAbgabe per Moodle\nwerden benotet, am Ende per Durchschnitt zusammengefasst und machen gemeinsam 50% der Note aus\nAbgabe mit der schlechtesten Benotung wird aus der Durchschnittsberechnung entfernt\nEinzelarbeit (Plagiatscheck)\nWir laden nach Abgabe “Musterlösung” hoch\n\n\n1x Hausaufgabe vorstellen\nBericht zu (neuem) Datensatz einreichen\n\nEs gibt keine Anwesenheitspflicht, wir empfehlen aber immer da zu sein, da euch die Prüfungsleistungen dann leichter fallen werden."
  },
  {
    "objectID": "folien/120423.html#user-interface",
    "href": "folien/120423.html#user-interface",
    "title": "12.04.23",
    "section": "User Interface",
    "text": "User Interface\n\noben links: Code\nunten links: Konsole - ausgeführter Code und Output\n\nhier lässt sich auch Code eintippen, dieser kann allerdings nicht gespeichert werden\n\noben rechts: u.a. Environment - welche Objekte und Daten exisitieren\nunten rechts: Dateizugriff, Plotanzeige, Hilfeanzeige, Package-Übersicht\n\nBild einfügen"
  },
  {
    "objectID": "folien/120423.html#codetest",
    "href": "folien/120423.html#codetest",
    "title": "12.04.23",
    "section": "Codetest",
    "text": "Codetest\n\n\n[1] 2\n\n\n1+1\n1+1"
  },
  {
    "objectID": "folien/120423.html#was-ist-r",
    "href": "folien/120423.html#was-ist-r",
    "title": "12.04.23",
    "section": "Was ist R?",
    "text": "Was ist R?\n\nProgrammiersprache (und -oberfläche) für statistische Berechnungen und Grafiken\nopen-source & kostenlos\ngroße Community, die ständig Funktionen erweitert und bei Problemen hilft\nR Studio ist die meistgenutzte Benutzeroberfläche und macht die Handhabung einfacher"
  },
  {
    "objectID": "folien/120423.html#r-vs.-quarto",
    "href": "folien/120423.html#r-vs.-quarto",
    "title": "12.04.23",
    "section": ".R vs. Quarto",
    "text": ".R vs. Quarto\n\nR’s Standardformat sind .R-Dateien\nFür “echte Arbeit” mit R sind Quarto-Dokumente meistens nützlicher:\n\nermöglichen Export/Rendern in andere Dateiformate (html, pdf, docx, pptx,…)\nermöglichen neben Code-Abschnitte auch Text-Abschnitte, die formatiert werden können (wie LaTex)\nermöglichen einzustellen, ob nur Code, nur Output, oder Code+Output angezeigt werden soll\nAuswertung & Bericht können somit im gleichen Dokument geschehen\nDiese Präsentation ist auch in R entstanden!\n\n\n\nBild Vergleich .R und .qmd"
  },
  {
    "objectID": "folien/120423.html#code-erstellen-ausführen",
    "href": "folien/120423.html#code-erstellen-ausführen",
    "title": "12.04.23",
    "section": "Code erstellen + ausführen",
    "text": "Code erstellen + ausführen\n\nÖffnet das File das ihr auf der Seite mit unseren Installationstips heruntergeladen habt (vielleicht ist es auch noch offen)\nIn dem File ist nur die Zeile ohne “#” ausführbarer Code. Wie hier geschehen, lassen sich mit “#” Kommentare in den Code hinzufügen, die dem Code Struktur geben oder erklären, was hier passieren soll\nFührt die Zeile Code aus, in dem ihr euren Cursor in die Zeile stellt und STRG+ENTER drückt\nÜber das Markieren von mehreren/allen Zeilen werden die entsprechenden Zeilen nacheinander ausgeführt\n\n\n# Erstes Skript zum Seminar Medienbasierte Wissenskonstruktion: R\n\n# Satz in Konsole printen:\nprint(paste0(\"Ich habe \",R.version$version.string,\" und RStudio v\",rstudioapi::versionInfo()$version))\n\n\n\n[1] \"Ich habe R version 4.2.1 (2022-06-23 ucrt) und RStudio v2023.3.0.386\""
  },
  {
    "objectID": "folien/120423.html#quarto",
    "href": "folien/120423.html#quarto",
    "title": "12.04.23",
    "section": "Quarto",
    "text": "Quarto\n\nErstellt ein Quarto-Dokument über File > New File > Quarto Document\nIm auftauchenden Fenster könnt ihr einstellen:\n\nTitel & AutorIn des Dokuments\ngewünschtes Output-Format (hier: html)\nwomit das Quarto-Dokument gerendert werden soll (hier: knitr)\n\nIm Dokument:\n\nDen Kasten oben heißt “YAML-header” - dort sind die Rendereinstellungen (Titel, Speicherort, Format, Schriftgröße usw.)\nIm Feld darunter kann Text geschrieben und formatiert werden\n\nSource: Format lässt sich über bestimmte Zeichen einstellen\nVisual: Format lässt sich über Markieren + Auswählen einstellen\n\nCode kann man nur innerhalb von Chunks einfügen (oben rechts auf das grün unterlegte C klicken oder STRG+ALT+I)\nIm grau unterlegten Kästchen lässt sich “normaler” R-Code schreiben und ausführen\n\n“Vorschau” über den Play-Button\nin den geschweiften Klammern lässt sich einstellen, was mit Code + Output beim Rendern passieren soll\n\n\nÜber “Render” wird das Dokument in das Zielformat umgewandelt\n\n\nBild Dialogfenster"
  },
  {
    "objectID": "folien/120423.html#quarto-1",
    "href": "folien/120423.html#quarto-1",
    "title": "12.04.23",
    "section": "Quarto",
    "text": "Quarto\n\nErstellt zwei Code-Chunks\nFügt bei einem der Chunks in geschweiften Klammern neben das “r” “echo = TRUE” (ohne Anführungszeichen)\nSchreibt in den Text- und in die Code-Bereich “4+5” (ohne Anführungzeichen)\nRendert das Dokument\n\n\n\n[1] 9\n\n\n\n4+5\n\n[1] 9\n\n\n4+5"
  },
  {
    "objectID": "folien/120423.html#rechenoperatoren",
    "href": "folien/120423.html#rechenoperatoren",
    "title": "12.04.23",
    "section": "Rechenoperatoren",
    "text": "Rechenoperatoren\n\nDezimaltrennzeichen: Punkt “.”, nicht Komma “,”\n” + ”\n” - ”\n” * ”\n” / ” (alle ohne Anführungszeichen)\nExponent: ^"
  },
  {
    "objectID": "folien/120423.html#objekte",
    "href": "folien/120423.html#objekte",
    "title": "12.04.23",
    "section": "Objekte",
    "text": "Objekte\n\nAnstatt nur Code durchzuführen und das Ergebnis in der Konsole abzulesen, können wir auch alles mögliche als Objekte speichern\nKonzept: links mit Objektname beginnen, dann den Zuweisungsoperator und anschließend das, was als Objekt gespeichert werden soll\n\n\nergebnis <- 3+5\n\n\nR führt den Code rechts vom Pfeil aus - das Objekt ist “8”, nicht “3+5”!\nObjekte lassen sich abrufen, indem man ihren Namen schreibt und ausführt\nR ist case-sensitive, d.h. Groß-und Kleinschreibung muss übereinstimmen!\nObjekte lassens sich auch oben rechts im Environment einsehen (wird aber irgendwann unübersichtlich…)\n\n\nergebnis\n\n[1] 8\n\n\n\nErstellt selbst eine Rechenaufgabe und speichert sie als Objekt!\nWas passiert, wenn man den gleichen Objektnamen erneut verwendet?"
  },
  {
    "objectID": "folien/120423.html#funktionen",
    "href": "folien/120423.html#funktionen",
    "title": "12.04.23",
    "section": "Funktionen",
    "text": "Funktionen\n\nMithilfe von Funktionen lassen sich Objekte/Daten bearbeiten\nBeispiel: round(3.45, digits = 1) rundet 3.45 auf die erste Nachkommastelle\n\nam Anfang steht der Name der Funktion (auch hier: case-sensitive)\ndie Argumente der Funktion werden von runden Klammern eingerahmt\nArgumente sind bspw. die Daten, auf die die Funktion angewendet werden soll, aber auch weitere Einstellungen der Funktion, z.B. auf wie viele Nachkommastellen gerundet werden soll\nSie folgen der Syntax “Argument = Angabe”\nArgumente werden durch Komma getrennt\ndie Argumente einer Funktion haben eine bestimmte Reihenfolge, daher kann man den Argumentnamen häufig weglassen, z.B. round(3.45, 1) (solange man die Funktion noch nicht gut kennt, oder auch um den Überblick zu behalten, besser die Argumente explizit nennen)"
  },
  {
    "objectID": "folien/120423.html#hilfe",
    "href": "folien/120423.html#hilfe",
    "title": "12.04.23",
    "section": "Hilfe",
    "text": "Hilfe\n\nÜber help(Funktion) wird die Hilfeseite/Dokumentation der Funktion “Funktion” aufgerufen\n\ngenauso funktioniert ?Funktion\nauf der Hilfeseite stehen mögliche Argumente, ihre Reihenfolge und in welchem Format das Argument angegeben wird (wird eine Zahl oder ein Wort erwartet?)\n\nFindet mit der Hilfe-Funktion heraus, was mean() macht und welche Argumente es hat\n\n?mean\n#oder\nhelp(mean)"
  },
  {
    "objectID": "folien/120423.html#packages",
    "href": "folien/120423.html#packages",
    "title": "12.04.23",
    "section": "Packages",
    "text": "Packages\n\nFrisch nach der Installation besteht R aus Base R und einigen wenigen Erweiterungen\nDurch die Installation von weiteren Paketen/Packages lassen sich die Funktionen fast beliebig erweitern: Jedes Package enthält Funktionen und/oder Datensätze, meistens zu bestimmten Analysen, mehr oder weniger nischig\nIm Fenster unten rechts unter “Packages” könnt ihr sehen, welche Packages schon installiert und/oder aktiviert sind\nNeue Packages lassen sich mit install.packages(\"package-name\") installieren und mit library(package-name) aktivieren (auf die Anführungszeichen achten!)\nInstalliert das Package psych\nFindet heraus, wie sich mit der Hilfefunktion help() auch Informationen über ein Package anzeigen lassen\nSchaut euch mit der Hilfefunktion help() an, welche Funktionen das Package psych beinhaltet\n\n\n\n\nScreenshot von help(psych)"
  },
  {
    "objectID": "folien/120423.html#objekte-erstellen",
    "href": "folien/120423.html#objekte-erstellen",
    "title": "12.04.23",
    "section": "Objekte erstellen",
    "text": "Objekte erstellen"
  },
  {
    "objectID": "folien/120423.html#datentypen",
    "href": "folien/120423.html#datentypen",
    "title": "12.04.23",
    "section": "Datentypen",
    "text": "Datentypen\n\nBasic:\n\nnumeric: Zahlen\ncharacter: Buchstabenfolgen\nfactor: z.B. Faktorstufen eines Faktors\nlogical: 1 oder 0 bzw. TRUE oder FALSE\n\nVektor: eindimensionale “Aufzählung” von Elementen des gleichen Datentyps\nMatrix: ein- bis zweidimensionale Aufzählung von Elementen des gleichen Datentyps\nArray: beliebig-dimensionale Aufzählung von Elementen des gleichen Datentyps\nListe: kann Datentypen und Strukturen enthalten (z.B. Ergebnis einer ANOVA)\nDataframe, tibble: Spezifische Formate, um Datensätze darzustellen. Können pro Spalte unterschiedliche Datentypen beinhalten."
  },
  {
    "objectID": "folien/120423.html#objekte-1",
    "href": "folien/120423.html#objekte-1",
    "title": "12.04.23",
    "section": "Objekte",
    "text": "Objekte\n\nWarum ist Objekte erstellen wichtig?\n\nFür R ist jeder Output sonst “flüchtig”: Es wird nicht wirklich etwas verändert\nZwischenergebnisse überprüfen\nParameter festlegen\nFlüchtigkeitsfehler vermeiden\nuvm.\n\nShortcut für <- : ALT+-\nPfeil in die andere Richtung und Gleichheitszeichen funktionieren nicht bzw. sollten nicht verwendet werden!"
  },
  {
    "objectID": "Auswertung_survey.html",
    "href": "Auswertung_survey.html",
    "title": "analysis_priorknowledge",
    "section": "",
    "text": "library(dplyr, warn.conflicts = F)\nlibrary(ggplot2)\nlibrary(reshape2)\n\npalette1 <- c(\"#648fff\",\"#785ef0\",\"#dc267f\",\"#fe6100\",\"#ffb000\",\"#000000\",\"#ffffff\")\npalette2 <- c(\"#CC79A7\",\"#D55E00\",\"#0072B2\",\"#F0E442\",\"#009E73\",\"#56B4E9\",\"#E69F00\",\"#000000\")\n\nThis is the corresponding quarto file for our analyses regarding the prior-existing knowledge in our R-course.\nFirst we want to import the data:\n\ndataset <- read.csv(\"/Users/simonkrukowski/Downloads/results-survey368965-6.csv\")\n\nOf course we’re dissatisfied with the variable names as provided by LimeSurvey, so we have to take care of that as well:\n\ndataset %>% \n  rename_with(., ~ gsub(\".\",\"_\",.,fixed = T)) -> dataset\n\n\ndataset %>% \n  # rename columns\n  rename(age = G01Q02,\n         r_knowledge = G01Q03,\n         r_problems = G01Q09,\n         programming_knowledge = G01Q05,\n         programming_c = G01Q06_c_,\n         programming_javascript = G01Q06_javascript_,\n         programming_python = G01Q06_python_,\n         programming_java = G01Q06_Java_,\n         programming_sql = G01Q06_sql_,\n         programming_julia = G01Q06_julia_,\n         programming_other = G01Q06_other_) %>% \n  # mutate (create new/change old columns to account for limesurvey artifacts)\n  mutate(across(everything(), ~na_if(., \"\")),\n         sex = case_when(G01Q01_female_ == \"Y\" ~ \"female\",\n                         G01Q01_male_ == \"Y\" ~ \"male\",\n                         G01Q01_diverse_ == \"Y\" ~ \"diverse\"),\n         r_knowledge_amount = case_when(G01Q04_priorknow_ == \"AO01\" ~ 1,\n                                        G01Q04_priorknow_ == \"AO02\" ~ 2,\n                                        G01Q04_priorknow_ == \"AO03\" ~ 3,\n                                        G01Q04_priorknow_ == \"AO04\" ~ 4,\n                                        G01Q04_priorknow_ == \"AO05\" ~ 5),\n         hopes_base_knowledge = case_when(G01Q10_SQ001_ == \"Y\" ~ \"Y\"),\n         hopes_improve_knowledge = case_when(G01Q10_SQ002_ == \"Y\" ~ \"Y\"),\n         hopes_dataviz = case_when(G01Q10_SQ003_ == \"Y\" ~ \"Y\"),\n         hopes_stat_analyses = case_when(G01Q10_SQ004_ == \"Y\" ~ \"Y\"),\n         hopes_websites = case_when(G01Q10_SQ005_ == \"Y\" ~ \"Y\")\n         ) %>% \n  # remove all columns that start with G0 (all limesurvey artifacts)\n  select(-starts_with(\"G0\")) %>% \n  # replace all Ys with bool values and replace NAs with FALSE for multiple choice items\n  mutate(across(everything(),  ~replace(., . ==  \"Y\" , TRUE)),\n         across(starts_with(c(\"programming_\",\"hopes_\")),~replace(., is.na(.), FALSE)),\n         across(c(starts_with(c(\"hopes\",\"programming\")),r_knowledge),as.logical)) %>% \n  mutate(r_knowledge = case_when(is.na(r_knowledge) ~ FALSE,\n                                 !is.na(r_knowledge) ~ TRUE)) -> dataset\n\nNow we want to delete the first four rows because these were test data.\n\ndataset %>% \n  filter(row_number() > 4) -> dataset\n\nOkay now it comes to visualising. Let’s skip the descriptive data for our second assignment and let’s instead focus on prior knowledge.\n\ndataset %>% \n  mutate(r_knowledge = case_when(r_knowledge == T ~\"Vorwissen\",\n                                 r_knowledge == F ~\"kein Vorwissen\")) %>% \n  ggplot(aes(x=r_knowledge))+\n  geom_bar(aes(fill=r_knowledge),color=\"#2b2b2b\")+\n  geom_label(aes(label = paste0(..count../sum(..count..)*100, \"%\")),\n            stat = \"count\",\n            colour = \"black\",\n            position = position_dodge(width=0.9),vjust = 0.5) +\n  scale_fill_manual(values=palette1[2:3])+\n  theme_classic()+\n  ylab(\"Anzahl\")+xlab(\"Vorwissen\")+labs(fill=\"Vorwissen\")\n\nWarning: The dot-dot notation (`..count..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(count)` instead.\n\n\n\n\n\nAnd then on the mean value of the 2 persons who do have prior knowledge. Here, a plot doesnt really make sense:\n\ndataset %>% \n  mutate(r_knowledge = case_when(r_knowledge == T ~\"Vorwissen\",\n                                 r_knowledge == F ~\"kein Vorwissen\")) %>% \n  group_by(r_knowledge) %>% \n  summarise(mean=mean(r_knowledge_amount))\n\n# A tibble: 2 × 2\n  r_knowledge     mean\n  <chr>          <dbl>\n1 kein Vorwissen  NA  \n2 Vorwissen        1.5\n\n\nOkay now let’s focus on prior knowledge in programming:\n\ndataset %>% \n  select(id,starts_with(\"progr\"),-programming_knowledge) %>% \n  rename_with(., ~ gsub(\"programming_\",\"\",.,fixed = T)) %>% \n  melt(id.vars = c(\"id\")) %>% \n  group_by(variable) %>% \n  summarise(sum=sum(value))\n\n# A tibble: 7 × 2\n  variable     sum\n  <fct>      <int>\n1 javascript     5\n2 python         9\n3 java           7\n4 c              3\n5 sql            3\n6 julia          0\n7 other          1\n\n\nLet’s visualise it. Here, we can skip the summarise.\n\ndataset %>% \n  select(id,starts_with(\"progr\"),-programming_knowledge) %>% \n  rename_with(., ~ gsub(\"programming_\",\"\",.,fixed = T)) %>% \n  melt(id.vars = c(\"id\")) %>% \n  filter(value==T) %>% \n  ggplot(aes(x=variable))+\n  geom_bar(aes(fill=variable),stat = \"count\",color=\"#2b2b2b\")+\n  geom_label(aes(label = paste0(round(..count../sum(..count..)*100,1), \"%\")),\n            stat = \"count\",\n            colour = \"black\",\n            position = position_dodge(width=0.9),vjust = 0.5) +\n  scale_fill_manual(values = palette1)+\n  theme_classic()+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  ylab(\"Anzahl\")+xlab(\"Programmiersprache\")+labs(fill=\"Programmiersprache\")\n\n\n\n\nOkay, now we also want to check the expectations:\n\ndataset %>% \n  select(id,starts_with(\"hopes\")) %>% \n  rename_with(., ~ gsub(\"hopes_\",\"\",.,fixed = T)) %>% \n  melt(id.vars = c(\"id\")) %>% \n  filter(value==T) %>% \n  ggplot(aes(x=variable))+\n  geom_bar(aes(fill=variable),stat = \"count\",color=\"#2b2b2b\")+\n  geom_label(aes(label = paste0(round(..count../sum(..count..)*100,1), \"%\")),\n            stat = \"count\",\n            colour = \"black\",\n            position = position_dodge(width=0.9),vjust = 0.5) +\n  scale_fill_manual(values = palette1)+\n  theme_classic()+\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  ylab(\"Anzahl\")+xlab(\"Erwartungen\")+labs(fill=\"Erwartungen\")"
  }
]