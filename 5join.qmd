---
title: "Zusammenhängende Dataframes"
author: "Kira Wolff"
execute: 
  eval: false
---

```{r}
library(tidyverse)

dataset <- read.csv("dataset_srl_challenges_wrangled.csv")
```

# Verknüpfung von Dataframes

Wir haben jetzt also ein neues dataframe, in dem die Arbeitsgedächtnisdaten enthalten sind. Natürlich wollen wir diese Daten am liebsten mit den restlichen Daten aus dem Fragebogen verknüpfen, damit uns für eine Auswertung alle Variablen zur Verfügung stehen. Welche Möglichkeit kennt ihr schon, zwei Dataframes miteinander zu verknüpfen?

```{r}
# bisheriges Wissen:
data.verknüpft <- cbind(daten1, daten2)
```

Wann könnte diese Variante zu Problem führen bzw. zu einfach gedacht sein?

-   Wenn die Zuordnung von Zeile und Proband nicht in beiden Dataframes identisch ist

-   Wenn beide Dataframes- nicht die gleiche Zeilenlänge haben, weil es z.B. nicht Daten zu allen Probanden gibt

Sinnvoller ist es daher, die Passung der Datenframes zu überprüfen bzw. zu garantieren. In base R gibt es dafür bspw. `match()`. Schaut euch mal die Dokumentation/Hilfe dafür an.

> `match(x, table, …)`
> `match` returns a vector of the positions of (first) matches of its first argument in its second.

Es wird also ein Vektor mit einem anderen Vektor verglichen.

```{r}
vec1 <- c(1:10, "abc")
vec2 <- c(5,3,1, "abc")

match(vec1, vec2)
# Woraus besteht der Output?
```

Der Output gibt an, welche Elemente aus dem ersten Vektor im zweiten Vektor vorkommen, indem er 1) die Elemente des ersten Vektors schrittweise durchgeht und 2) für in beiden Vektoren vorkommende Elemente die Position des Elements im zweiten Vektor notiert. Er gibt [nicht]{.underline} an, wie die Elemente "heißen".

Was können wir damit anfangen?

Wir können es als Index nutzen, der uns angibt, welche Zeilen wir mit welchen matchen dürfen. Nach dem Prinzip: "Für das erste Element aus `vec1` nimm bitte das dritte Element aus `vec2`". Wir wenden den Index also auf die Spalte mit der Variable an, die wir übertragen wollen:

```{r}
data2$var[match(data1$id, data2$id)]
# Ergebnis: Die Werte von var aus data2, sortiert in der Reihenfolge, in der sie für data1 sinnvoll sind.

# richtige Übertragung auf data1:
data1 <- data1 %>% 
  mutate(newvar = data2$var[match(data1$id, data2$id)])
# Jetzt enthält data1 die Daten aus data2$var, aber garantiert in der richtigen Reihenfolge
```

`match()` ist praktisch, benötigt allerdings Schreibaufwand bzw. Konzentration bei der Umsetzung. Außerdem ist es in der Form nur auf eine Variable beschränkt.

Natürlich hat `dplyr` wieder etwas angenehmeres für uns: `left_join()`

```{r}
data1 <- data1 %>% 
  left_join(data2, by = "id")
```

Hier werden alle Variablen aus data2 in data1 ergänzt, gematcht nach der id-Spalte, die hier in beiden Datensätzen verwendet wurde. Sollten die ID-Spalten unterscheidlich heißen, lässt sich das über `by = c("a" = "b")` ausgleichen

`left_join()` ist die Standardfunktion, um die Daten aus zwei Datensätzen miteinander zu verknüpfen, es gibt allerdings außerdem noch `right_join()`, `inner_join()` und `full_join()`.

Schaut euch die Dokumentation/Hilfe an und versucht den Unterschied mal in eigenen Worten zu erklären. Wann kann uns welche Funktion nützen?

-   `inner_join()`: Das Ergebnis enthält nur Zeilen, deren ID in beiden Datensätzen vorkommt.\
    Beispiel: Ich habe zwei separate Studien gemacht und mich interessieren nur noch die Probanden, die an beiden Studien teilgenommen haben. Ich möchte die erhobenen Variablen aus beiden Studien zusammenführen. Zeilen von Probanden, die nur an einer Studie teilgenommen haben, können also wegfallen.

    [![Abbildungen aus R for Data Science (Wickham & Grolemund 2017)](/assets/img/inner_join.png){width="450"}](https://r4ds.had.co.nz/relational-data.html)

-   `full_join()`: Das Ergebnis enthält alle Zeilen aus beiden Datensätzen, wobei die nach ID zueinander passenden Zeilen natürlich kombiniert wurden.\
    Beispiel: Ich habe verschiedene LimeSurvey-Umfragen zu verschiedenen Zeitpunkten für eine Langzeitstudie gemacht. Manche Probanden haben nur an T1 teilgenommen, andere nur an T2, manche an beiden. Ich möchte natürlich alle Probanden behalten, auch wenn manche bei einigen Variablen dann Lücken zeigen. Alle Zeilen aus beiden Studien sollen behalten werden.

    ![](/assets/img/full_join.png){width="450"}

-   `left_join()`: Das Ergebnis enthält alle Zeilen aus dem ersten Datensatz und passende aus dem zweiten Datensatz.\
    Beispiel: In meiner Studie wurde Stress bei DiabetikerInnen gemessen. Viele der DiabetikerInnen haben bereits an einer anderen Studie teilgenommen, bei der die medizinischen Daten noch genauer erhoben wurden. Ich möchte davon alles, was meine Studie ergänzen kann, übernehmen. Der Stress-Datensatz soll dabei natürlich komplett erhalten bleiben. Zeilen von Probanden aus der anderen Studie, die nicht an der Stress-Studie teilgenommen haben, interessieren mich aber nicht.

    ![](/assets/img/left_join.png){width="450"}

-   `right_join()`: Das Ergebnis enthält alle Zeilen aus dem zweiten Datensatz und passende aus dem ersten Datensatz.

    ![](/assets/img/right_join.png){width="450"}\
    Mit `left_join()` und `right_join()` lässt sich also prinzipiell das Gleiche erreichen, wenn man die Datensätze an die passende Stelle setzt. Für welche Option man sich entscheidet hängt also vor allem davon ab, ob vor dem Joinen noch Datawrangling notwendig ist, z.B. wenn ich aus meinem ergänzenden Datensatz nur bestimmte Spalten übernehmen will:

```{r}
data2 %>% 
  select(ID, var3, var4) %>% 
  right_join(data1, by="ID")
# Output besteht aus data1 (+ Erweiterungen)
```

## Aufgabe

Jetzt, wo ihr die Theorie von left_join() kennengelernt habt, könnt ihr es auch selbst anwenden für unsere dataframes.

```{r}
#| echo: false
wm <-  read.csv("C:/Users/WIMI/OneDrive - Universitaet Duisburg-Essen/Dokumente/PsychMeth/Lehre/_SoSe 2023/R Masterseminar/offline/id_wmc_PCU.csv")

data.joined <- dataset %>% 
  left_join(wm, by = "id")
```
