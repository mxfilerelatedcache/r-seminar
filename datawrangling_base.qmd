---
title: "Base R"
subtitle: "Seminar[2] <- Data Wrangling, Desriptives & Visualisierung"
author: "Simon Krukowski"
format:
  html:
    code-fold: false
    code-summary: "Show code"
    df-print: paged
editor: visual
---

```{r}
#| warning: false
#| code-fold: true
library(tidyverse)
library(reshape2)
library(reactable)

palette1 <- c("#648fff","#785ef0","#dc267f","#fe6100","#ffb000","#000000","#ffffff")
palette2 <- c("#CC79A7","#D55E00","#0072B2","#F0E442","#009E73","#56B4E9","#E69F00","#000000")
```

# Data Wrangling: Base R

In der letzten Woche habt ihr kennengelernt, wie R & RStudio aufgebaut sind, wie die R-Syntax funktioniert, und was es für Datentypen & Funktionen gibt. In dieser Sitzung wollen wir darauf aufbauen und konkreter mit Daten arbeiten. Dabei werden zwei Packages eine große Rolle spielen: [`dyplr`](https://dplyr.tidyverse.org) und [`ggplot2`](https://ggplot2.tidyverse.org).

## Iris Datensatz

Beginnen wir also zunächst damit, Daten in R einzulesen. Wir werden heute mit dem `iris` Datensatz arbeiten, einem berühmten Datensatz von R.A. Fisher aus dem Jahr 1936, in dem verschiedene Eigenschaften in Bezug auf die Blütengröße verschiedener Spezies der Blume *Iris* enthalten sind (siehe [hier](https://www.comp.tmu.ac.jp/morbier/R/Fisher-1936-Ann._Eugen.pdf)).

![Sources: Wikipedia; Danielle Langlois, Денис Анисимов & Eric Hunt](assets/img/irises.png){fig-align="center" width="700"}

Im Zentrum des Datensatzes steht die Größe der verschiedenen Blatttypen für die jeweilige Spezies. Dabei gibt es die Blatttypen `Sepal` und `Petal`. Die folgende Grafik verdeutlicht das etwas:

![](assets/img/iris_sepal_petal.png){fig-align="center" width="500"}

Der Datensatz ist direkt im Package `datasets` integriert. Um allerdings zu lernen, wie wir Daten bspw. aus `.csv` einlesen, haben wir den Datensatz nochmal als einzelne Datei vorbereitet. Diese können wir hier herunterladen:

{{< downloadthis assets/datasets/iris.csv label="Iris Datensatz" icon=filetype-csv type=primary class=btn >}}

<!---
### Exkurs: Trennzeichengetrennte Textdateien & CSV

`.csv` ist ein typisches Datenformat, aus dem wir mit R Daten einlesen können. Wenn wir die Datei mit einem Textbearbeitungsprogramm öffnen, sehen wir, wie die Daten dort strukturiert sind:

![.csv in einem Texteditor (hier Sublime Text)](assets/img/csv.png){fig-align="center" width="600"}

Wir sehen, dass die Daten einfach hintereinander per Text in der Datei gespeichert sind, und mit einem Trennzeichen (in diesem Fall das `,`) voneinander getrennt sind. Strings werden mit `"` abgespeichert. Die erste Zeile beschreibt die Spaltennamen.

## Daten einlesen

Nun wissen wir also, wie `.csv` Dateien funktionieren. Fangen wir also an, die Daten in R-einzulesen:

```{r}
dataset <- read.csv("assets/datasets/iris.csv")
```

Die Funktion `read.csv` liest die Dateien ein. Als Parameter müssen wir lediglich den Pfad zur Datei angeben. In unserem Fall handelt es sich um einen relativen Pfad - absolute Pfade würden auch funktionieren. In unserem Fall ist die Datei wir wir wissen mit Komma (`,`) getrennt, daher brauchen wir nichts weiter als Parameter zu übergeben. Achtung: Das deutsche Excel speichert Dateien bei `.csv` oft mit Semikolon (`;`) als Trennzeichen ab (aufrund des Kommas als Dezimaltrennzeichen).

> Mac User:innen aufgepasst: Wenn ihr im Finder mit der rechten Maustaste auf eine Datei klickt, und dann `alt` bzw. `option` drückt, könnt ihr direkt den Pfad zur Datei in eure Zwischenablage kopieren. Das eignet sich hier bspw. besonders gut.

Wenn alles geklappt hat, sollte `dataset` rechts in unserem Environment auftauchen. Schauen wir es uns also an. Hierzu können wir entweder rechts oben auf das Objekt klicken, damit es sich im Viewer öffnet, oder wir schauen es uns hier an:

```{r}
dataset
```

Wie wir sehen gibt es mehrere Spalten für die Länge und Breite der Blätter (e.g., `Sepal.Length`), sowie eine Spalte mit der Spezies (`Species`).

Werfen wir nun einen genaueren Blick in die Daten.

## Daten anschauen

Um schnell einen Überblick über die Daten zu bekommen, eignet sich die `summary()` Funktion:

```{r}
summary(dataset)
```

Hier sehen wir direkt deskriptive Werte wie Minimum, Maximum oder Median für jede einzelne Spalte. Für die Spalte `Species` sehen wir allerdings lediglich, dass diese als character gespeichert ist, wenngleich es sich eigentlich um einen Faktor handelt, da wir ja bereits wissen, dass es drei Spezies gibt. Das können wir ändern:

```{r}
dataset$Species <- as.factor(dataset$Species)
```

Führen wir nun den Code erneut aus, sehen wir die entsprechenden Faktorlevel bzw. Ausprägungen und die jeweiligen Datenpunkte pro Ausprägung:

```{r}
summary(dataset)
```

Das Gleiche würden wir sehen, wenn wir mit der Funktion `levels` die Ausprägungen für die entsprechende Spalte abfragen:

```{r}
levels(dataset$Species)
```

## Deskriptive Analysen

Strenggenommen hat uns die `summary()` Funktion bereits viele interessante Werte für alle Spalten gegeben. Falls wir dies aber für eine einzelne Spalte machen wollen, können wir dies natürlich auch tun:

```{r}
mean(dataset$Sepal.Length)
```

Wie wir sehen, kann die `mean()` Funktion mit einer Spalte eines Dataframes (über den `$`-Operator ausgewählt) arbeiten, und gibt uns den entsprechenden Mittelwert aus. Gleich verhält es sich mit der Standardabweichung:

```{r}
sd(dataset$Sepal.Length)
```

Wie wir in der ersten Seminarstunde bereits gesagt haben, bietet R als Statistiksoftware natürlich eine Vielzahl eingebauter Standard-Funktionen. So können wir etwa auch gleich die Korrelation zwischen `Sepal.Width` und `Sepal.Length` berechnen...

```{r}
cor(dataset$Sepal.Length,dataset$Sepal.Width, method = "pearson")
```

... oder die Quantile ausgeben lassen:

```{r}
quantile(dataset$Sepal.Length)
```

Das sind natürlich alles nur Beispiele der im `base` Package enthaltenen Funktionen - alle weiteren können wir bspw. in der [Dokumentation](https://stat.ethz.ch/R-manual/R-devel/library/base/html/00Index.html) oder über `help(base)` finden.

## Datensatz aufteilen

Angenommen, wir wollen die Spalte `Species` von den anderen Spalten trennen, und in einem separaten Aufgabenblatt abspeichern. Dies können wir über die `$` und `<-` Operatoren machen:

```{r}
dataset_species <- dataset$Species
```

Dies speichert die entsprechende Spalte als Objekt `dataset_species` in unserem Environment. Dies geschieht als Vektor des Typs `factor`. Die Länge des Vektors entspricht natürlich der Anzahl an Observations:

```{r}
length(dataset_species)
```

Nun wollen wir einen Schritt weitergehen, und nicht nur einzelne Spalten extrahieren, sondern unseren Datensatz auf Basis gewisser Kriterien filtern, bzw. ein Subset bilden. Base R bietet dafür die `subset()` Funktion. Deren Syntax ist folgendermaßen:

```{r}
dataset_filtered <- subset(dataset, Sepal.Width > 3)
```

Wir definieren das betreffende Objekt `dataset`, sowie die Spalte, nach der wir filtern wollen (`Sepal.Width`) und unsere Bedingung (\> 3).

Wir wollen aber noch weiter spezifizieren. Angenommen, wir wollen, dass zusätzlich nur Blumen der Spezies `setosa` im Datensatz enthalten sind, und wir nur die Spalten `Sepal.Width` und `Sepal.Length` betrachten wollen:

```{r}
dataset_filtered2 <- subset(dataset, Sepal.Width > 3 & Species == "setosa",select = c(Sepal.Width,Sepal.Length,Species))
```

Der obige Befehl hat das Objekt `dataset_filtered2` erzeugt, welches die entsprechenden Filterungen beinhaltet.

Wir haben nun also gelernt, wie wir sogenannte *Subsets* von Dataframes auf Basis von Variablenausprägungen und Spalten erzeugen können, und diese enstprechend in unserem Environment speichern können.

Wenn wir nun allerdings einen Blick in unser Environment werfen, und uns vorstellen, wie dieses nach einer R-Session aussehen könnte, stellt sich vielleicht eine Frage: **Wie können wir den Überblick behalten?**

![[How the author imagines Environment overload]{style="text-align: center"}](assets/img/overload.png){fig-align="center" width="800"}

Dabei, sowie bei vielen anderen Dingen die mit **Data Wrangling** zu tun haben, hilft uns das `dplyr` package. Dazu auf der [nächsten Seite](datawrangling_dplyr.qmd) mehr.

-->
