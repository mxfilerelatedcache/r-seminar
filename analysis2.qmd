---
title: "Base R"
subtitle: "Seminar[4] <- Konkrete Anwendungsfälle: Studien & Limesurvey"
author: "Simon Krukowski"
format:
  html:
    code-fold: false
    code-summary: "Show code"
    df-print: paged
editor: visual
bibliography: "assets/bibliographies/analysis1.bib"
---

```{r}
#| warning: false
#| code-fold: true
library(tidyverse)
library(reshape2)
library(reactable)

palette1 <- c("#648fff","#785ef0","#dc267f","#fe6100","#ffb000","#000000","#ffffff")
palette2 <- c("#CC79A7","#D55E00","#0072B2","#F0E442","#009E73","#56B4E9","#E69F00","#000000")

dataset <- read.csv("dataset_srl_challenges_wrangled.csv")
```

# Fragebogenstudien mit Limesurvey

## Deskriptive Analysen

Wir haben nun also den Datensatz bereinigt, Items zu Summen- bzw. meanscores zusammengefasst, sowie deren interne Konsistenz berichtet. Super! Der nächste Schritt in unserer Analyse wäre üblicherweise, mittels deskriptiver Analysen eine Idee von unseren Daten zu bekommen. Das machen wir gleich mal:

### Stichprobe

Natürlich haben wir die Basis-Informationen zu unserer Stichprobe, wie Alter, Geschlecht, etc.

> Frage: Wie können wir das gut berichten?

```{r}
dataset %>% 
  group_by(dmSex) %>% 
  summarise(age=mean(dmAge),n=n()) %>% 
  mutate(rel=paste0(round(n/sum(n)*100,2),"%"))
```

Falls wir unseren Output direkt in einem publikationsfähigen Table haben wollen, können wir dies mit `stargazer()` tun:

```{r}
#| output: asis
dataset %>% 
  group_by(dmSex) %>% 
  summarise(age=round(mean(dmAge)),n=n()) %>% 
  stargazer::stargazer(type = "html",summary = F)
```

### Fragebögen

In wissenschaftlichen Arbeiten ist es üblich, immer auch gleich die `mean()` bzw. `sd()` values mitzuberichten. Machen wir das also für unsere eben gebildeten Skalen.

### Suboptimal Study

```{r}
dataset %>% 
  summarise(across(c(sl_SQ002,
                     sl_SQ003,
                     sl_SQ005,
                     sl_SQ007),
                   list(mean=mean,sd=sd)),
            total_mean=mean(suboptimal_study),
            total_sd=sd(suboptimal_study))
```

### Gewissenhaftigkeit

```{r}
dataset %>% 
  summarise(across(c(gh_ordnungsliebe,
  gh_fleiss,
  gh_verlaesslichkeit),list(mean=mean,sd=sd)),total_m=mean(gewissenhaftigkeit),total_sd=sd(gewissenhaftigkeit))
```

### SRL-Probleme

Unser 90-Items Fragebogen, zu dem wir glücklicherweise schon die Meanscores haben, bietet sich aufgrund der Größe eher weniger zur numerischen Darstellung an. Hier wollen wir lieber visuell die Werte zeigen. Doch wie machen wir das? Ein kurzer Blick in den Datensatz verrät, dass es einige Subskalen gibt:

```{r}
dataset %>% 
  select(starts_with("P",ignore.case=F),-Probleme_gesamt)
```

Angenommen, wir wollten aber nun die Mittelwerte sowie Standardabweichungen (bspw. über `geom_bar()` und `geom_errorbar()`) für alle diese Spalten berechnen - wie würden wir da vorgehen? Das leitet zu einem weiteren wichtigen Konzept über: Das **long** vs. **wide** Format von Daten.

## Reshaping data

Normalerweise sind Daten in einem Format angeordnet, das dem folgendem entspricht:

```{r}
#| echo: false
df <- data.frame(rbind(c(1,2,3,4),c(5,6,7,8)))
names(df) <- c("other","variable1","variable2","variable3")

df
```

> Frage: Wenn wir nun allerdings die Variablen `variable1`, `variable2` und `variable3` in einem Plot darstellen wollten, was wäre das Problem?

```{r}
#| eval: false

df %>% 
  ggplot()+
  geom_bar(aes(x=?,y=?))
```

Das Problem ist, dass die Variablen als einzelne Spalten vorhanden sind, das hilft uns bei der Visualisierung mit `ggplot` nicht weiter. Die Daten befinden sich im `long` Format. Für viele Analysen bietet sich aber das `wide` Format viel besser an. Hier ein Beispiel, wie das `wide` Format im oben genannten Dataframe aussieht:

```{r}
#| echo: false
df %>% 
  tidyr::pivot_longer(cols=variable1:variable3)
```

Somit können wir viel einfacher mit `ggplot` weiterarbeiten:

```{r}
#| eval: false

df %>% 
  tidyr::pivot_longer(cols=variable1:variable3) %>% 
  ggplot() +
  geom_boxplot(aes(x=name,y=value,fill=name))+
  scale_fill_manual(values=palette1)+
  theme_classic()
```

Dieses sogenannte "schmelzen" des Dataframes ermöglicht uns die Funktion `pivot_longer` aus dem `tidyr` Package. Dessen Syntax ist relativ einfach:

```{r}
#| eval: false
df %>% 
  tidyr::pivot_longer(cols=variable1:variable3)
```

Hierbei bleibt die Variable, die nicht bei `cols=` übergeben wird, automatisch als ID Variable.

Machen wir das also mit unserem Datensatz, um die verschiedenen Subskalen für Probleme zu visualisieren:

```{r}
dataset %>% 
  select(id,starts_with("P",ignore.case=F),-Probleme_gesamt) %>% 
  tidyr::pivot_longer(cols=P_Verständnis:P_Ressouren_Technik)
```

Nun können wir ganz einfach weiterarbeiten mit `ggplot`.

> Frage: Probieren wir doch mal ein Violin-Plot aus!

```{r}
dataset %>% 
  select(starts_with("P",ignore.case=F),-Probleme_gesamt) %>% 
  tidyr::pivot_longer(cols=P_Verständnis:P_Ressouren_Technik) %>% 
  ggplot()+
  geom_violin(aes(x=name,y=value,fill=name))+
  theme_classic()+
  scale_fill_manual(values=palette2)+
  scale_x_discrete(guide = guide_axis(angle = 45))
```
