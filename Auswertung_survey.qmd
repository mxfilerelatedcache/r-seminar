---
title: "analysis_priorknowledge"
author: "Simon Krukowski"
execute:
  eval: false
---

```{r}
library(dplyr, warn.conflicts = F)
library(ggplot2)
library(reshape2)

palette1 <- c("#648fff","#785ef0","#dc267f","#fe6100","#ffb000","#000000","#ffffff")
palette2 <- c("#CC79A7","#D55E00","#0072B2","#F0E442","#009E73","#56B4E9","#E69F00","#000000")
```

This is the corresponding quarto file for our analyses regarding the prior-existing knowledge in our R-course.

First we want to import the data:

```{r}
#| eval: false
dataset <- read.csv("/Users/simonkrukowski/Downloads/results-survey368965-6.csv")
```

Of course we're dissatisfied with the variable names as provided by LimeSurvey, so we have to take care of that as well:

```{r}
dataset %>% 
  rename_with(., ~ gsub(".","_",.,fixed = T)) -> dataset
```

```{r}
dataset %>% 
  # rename columns
  rename(age = G01Q02,
         r_knowledge = G01Q03,
         r_problems = G01Q09,
         programming_knowledge = G01Q05,
         programming_c = G01Q06_c_,
         programming_javascript = G01Q06_javascript_,
         programming_python = G01Q06_python_,
         programming_java = G01Q06_Java_,
         programming_sql = G01Q06_sql_,
         programming_julia = G01Q06_julia_,
         programming_other = G01Q06_other_) %>% 
  # mutate (create new/change old columns to account for limesurvey artifacts)
  mutate(across(everything() & where(is.character), ~na_if(., "")),
         across(everything() & where(is.numeric), ~na_if(., 0)),
         sex = case_when(G01Q01_female_ == "Y" ~ "female",
                         G01Q01_male_ == "Y" ~ "male",
                         G01Q01_diverse_ == "Y" ~ "diverse"),
         r_knowledge_amount = case_when(G01Q04_priorknow_ == "AO01" ~ 1,
                                        G01Q04_priorknow_ == "AO02" ~ 2,
                                        G01Q04_priorknow_ == "AO03" ~ 3,
                                        G01Q04_priorknow_ == "AO04" ~ 4,
                                        G01Q04_priorknow_ == "AO05" ~ 5),
         hopes_base_knowledge = case_when(G01Q10_SQ001_ == "Y" ~ "Y"),
         hopes_improve_knowledge = case_when(G01Q10_SQ002_ == "Y" ~ "Y"),
         hopes_dataviz = case_when(G01Q10_SQ003_ == "Y" ~ "Y"),
         hopes_stat_analyses = case_when(G01Q10_SQ004_ == "Y" ~ "Y"),
         hopes_websites = case_when(G01Q10_SQ005_ == "Y" ~ "Y")
         ) %>% 
  # remove all columns that start with G0 (all limesurvey artifacts)
  select(-starts_with("G0")) %>% 
  # replace all Ys with bool values and replace NAs with FALSE for multiple choice items
  mutate(across(everything(),  ~replace(., . ==  "Y" , TRUE)),
         across(starts_with(c("programming_","hopes_")),~replace(., is.na(.), FALSE)),
         across(c(starts_with(c("hopes","programming")),r_knowledge),as.logical)) %>% 
  mutate(r_knowledge = case_when(is.na(r_knowledge) ~ FALSE,
                                 !is.na(r_knowledge) ~ TRUE)) -> dataset
```

Now we want to delete the first four rows because these were test data.

```{r}
dataset %>% 
  filter(row_number() > 4) -> dataset
```

Okay now it comes to visualising. Let's skip the descriptive data for our second assignment and let's instead focus on prior knowledge.

```{r}
dataset %>% 
  mutate(r_knowledge = case_when(r_knowledge == T ~"Vorwissen",
                                 r_knowledge == F ~"kein Vorwissen")) %>% 
  ggplot(aes(x=r_knowledge))+
  geom_bar(aes(fill=r_knowledge),color="#2b2b2b")+
  geom_label(aes(label = paste0(after_stat(count)/sum(after_stat(count))*100, "%")),
            stat = "count",
            colour = "black",
            position = position_dodge(width=0.9),vjust = 0.5) +
  scale_fill_manual(values=palette1[2:3])+
  theme_classic()+
  ylab("Anzahl")+xlab("Vorwissen")+labs(fill="Vorwissen")
  
```

And then on the mean value of the 2 persons who do have prior knowledge. Here, a plot doesnt really make sense:

```{r}
dataset %>% 
  mutate(r_knowledge = case_when(r_knowledge == T ~"Vorwissen",
                                 r_knowledge == F ~"kein Vorwissen")) %>% 
  group_by(r_knowledge) %>% 
  summarise(mean=mean(r_knowledge_amount))
```

Okay now let's focus on prior knowledge in programming:

```{r}
dataset %>% 
  select(id,starts_with("progr"),-programming_knowledge) %>% 
  rename_with(., ~ gsub("programming_","",.,fixed = T)) %>% 
  melt(id.vars = c("id")) %>% 
  group_by(variable) %>% 
  summarise(sum=sum(value))
```

Let's visualise it. Here, we can skip the summarise.

```{r}
dataset %>% 
  select(id,starts_with("progr"),-programming_knowledge) %>% 
  rename_with(., ~ gsub("programming_","",.,fixed = T)) %>% 
  melt(id.vars = c("id")) %>% 
  filter(value==T) %>% 
  ggplot(aes(x=variable))+
  geom_bar(aes(fill=variable),stat = "count",color="#2b2b2b")+
  geom_label(aes(label = paste0(round(after_stat(count)/sum(after_stat(count))*100,1), "%")),
            stat = "count",
            colour = "black",
            position = position_dodge(width=0.9),vjust = 0.5) +
  scale_fill_manual(values = palette1)+
  theme_classic()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  ylab("Anzahl")+xlab("Programmiersprache")+labs(fill="Programmiersprache")
```

Okay, now we also want to check the expectations:

```{r}
dataset %>% 
  select(id,starts_with("hopes")) %>% 
  rename_with(., ~ gsub("hopes_","",.,fixed = T)) %>% 
  melt(id.vars = c("id")) %>% 
  filter(value==T) %>% 
  ggplot(aes(x=variable))+
  geom_bar(aes(fill=variable),stat = "count",color="#2b2b2b")+
  geom_label(aes(label = paste0(round(after_stat(count)/sum(after_stat(count))*100,1), "%")),
            stat = "count",
            colour = "black",
            position = position_dodge(width=0.9),vjust = 0.5) +
  scale_fill_manual(values = palette1)+
  theme_classic()+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))+
  ylab("Anzahl")+xlab("Erwartungen")+labs(fill="Erwartungen")
```
