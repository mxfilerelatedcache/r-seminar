{
  "hash": "daac28c12d974305975137245ba0a6c6",
  "result": {
    "markdown": "---\ntitle: \"Visualisierung mit ggplot2\"\nsubtitle: \"Seminar[2] <- Data Wrangling, Desriptives & Visualisierung\"\nauthor: \"Simon Krukowski\"\nformat:\n  html:\n    code-fold: false\n    code-summary: \"Show code\"\n    df-print: paged\neditor: visual\nexecute:\n  freeze: true\n---\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\nlibrary(reshape2)\nlibrary(reactable)\n\npalette1 <- c(\"#648fff\",\"#785ef0\",\"#dc267f\",\"#fe6100\",\"#ffb000\",\"#000000\",\"#ffffff\")\npalette2 <- c(\"#CC79A7\",\"#D55E00\",\"#0072B2\",\"#F0E442\",\"#009E73\",\"#56B4E9\",\"#E69F00\",\"#000000\")\n\ndataset <- read.csv(\"assets/datasets/iris.csv\")\ndataset$Species <- as.factor(dataset$Species)\n```\n:::\n\n\n# Data Visualisation: ggplot2\n\nWir wissen nun, wie wir mithilfe von `dplyr` schnell & effizient eine bessere Idee über unsere Daten bekommen. Doch tabellarische Daten und einzelne Werte sind nur eine Seite der Data-Science Medaille: Besonders durch Datenvisualierung bekommen wir schnell eine Idee über die Verteilung von Daten, und können versteckte Signale in den Daten enthüllen. Dazu eignet sich `ggplot2` hervorragend. Ebenso wie `dplyr` gehört `ggplot2` zu den beliebtesten R-Packages.\n\n![How the author imagines how ggplot2 uncovers the world of knowledge](assets/img/ggplot2.png){alt=\"How the author imagines how ggplot2 uncovers the world of knowledge\" fig-align=\"center\" width=\"800\"}\n\nEbenso wie `dplyr` sollte sich `ggplot2` automatisch durch die Installation von `tidyverse` installiert haben:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\nlibrary(dplyr)\n```\n:::\n\n\n## Hintergrund\n\nBase-R bietet natürlich auch Funktionen zur Visualisierung von Daten. Jedoch ist es auch hier hilfreich, gleich den \"state-of-the-art\" zu lernen und sich `ggplot2` anzueignen, da wir somit viel mehr Anpassungsmöglichkeiten, sowie eine vereinfachte Grammatik haben. Um dennoch etwas Kontext zu bieten, schauen wir uns illustrativ die `base`-R `hist()` Funktion an:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(dataset$Sepal.Length)\n```\n\n::: {.cell-output-display}\n![](dataviz_ggplot2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nWir sehen, mit ganz wenig Code bietet `base`-R bereits eine Funktion zum erstellen von Histogrammen an. Das kann manchmal nützlich sein, bspw. wenn wir schnell einen Überblick über die Verteilung einer Variablen bekommen möchten. Aus den oben genannten Gründen wollen wir an dieser Stelle aber den Fokus vor allem auf `ggplot2` setzen. Hinweis: `ggplot2` ist der offzielle Name und auch das richtige Package, der Einfachheit halber werden wir aber von `ggplot` sprechen.\n\n## Syntax\n\nEbenso wie der Pipe-Operator `%>%` bei `dplyr` eine besondere Rolle spielt, tut es das `+` bei `ggplot`. Aber dazu gleich mehr. Im Folgenden sehen wir den grundsätzlichen Aufbau eines Befehls bzw. einer Befehlskette, die ein Plot erzeugt:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=object)+\n  geom_function(aes(x=variable),parameters=\"xyz\")+\n  additional_functions(parameters=\"additionals\")\n```\n:::\n\n\nDas sieht auf den ersten Blick erstmal komplizierter aus, als es ist. Aber wir werden den Code Schritt für Schritt aufschlüsseln.\n\n### + Operator\n\nWie bereits erwähnt, spielt der `+` Operator eine wichtige Rolle bei `ggplot2`. Durch `+` können wir Befehle miteinander verketten. Wichtig zu verstehen ist, dass - ähnlich wie bei `dplyr` - das Verketten von Befehlen dem \"Stapeln\" verschiedener Visualisierungen bzw. Eigenschaften entspricht, und jeder einzelne Schritt etwas zum finalen Plot beiträgt. Wie genau das abläuft, werden wir gleich am Beispiel des `iris` Datensatzes sehen.\n\n### geom_function()\n\n`geom_function()` (`geom_` für *geometrical*) ist hier nur ein Platzhalter für eine Vielzahl verschiedener Funktionen, die wir in Abhängigkeit davon benutzen, was wir visualisieren wollen. So gibt es etwa `geom_bar()` für Bar-Charts, `geom_point()` für Punktwolken oder `geom_line()` für Liniendiagramme. Weiter unten werden wir einige davon beispielhaft vorstellen.\n\n### aes()\n\n`aes()` steht für *aesthetics* und sorgt dafür, Datenpunkte in visuelle Darstellung zu übertragen bzw. zu mappen. Das klingt erstmal abstrakter, als es eigentlich ist. Meistens werden hier die Variablen für die entsprechenden Achsen angebenen (bspw. `x=Sepal.Width`) oder aber auch für die Farben bzw. Füllungen von Balken/Punkten (bspw. `color=Species`). Warum das wichtig ist und was der Unterschied zu Parametern außerhalb der `aes()` Funktion ist, werden wir gleich sehen.\n\n### Parameters\n\nWie bei allen Funktionen können wir hier auch diverse Dinge als Parameter übergeben. Beispiele sind etwa `color` oder `size`.\n\n### additional_functions()\n\nAuch `additional_functions()` sind hier nur ein Platzhalter für eine Vielzahl weiterer Funktionen, die wir mit in unsere `ggplot` Kette nehmen können, bspw. `theme_classic()` oder `xlab()`. Mithilfe dieser können wir das Plot im Nachhinein weiter anpassen.\n\n## Beispiel\n\nSoweit die Syntax. Am besten lässt sich `ggplot` aber anhand eines Beispiels verstehen. Machen wir also mit unserem `iris` Datensatz weiter. Wir wollen die Verteilung der Blattgrößen besser verstehen, und entscheiden uns dazu, ein Plot mit `ggplot` zu erstellen. Wie bereits beschrieben, hilft der `+` Operator dabei, verschiedene Funktionen für das Plot miteinander zu verketten. Fangen wir also mit der ersten Ebene an:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = dataset)\n```\n\n::: {.cell-output-display}\n![](dataviz_ggplot2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nWir sehen, mit dem Befehl `ggplot()` haben wir ein leeres Plot erzeugt. Fügen wir nun also ein Diagramm unserer Wahl hinzu. Wir fangen mit `geom_bar()` an.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = dataset)+\n  geom_bar()\n```\n:::\n\n\nWie wir sehen können, wirft R den Fehler :\n\n```         \n`stat_count()` requires an x or y aesthetic.\n```\n\nDas liegt daran, dass wir die `aes()` Funktion vergessen haben. Ohne das mapping von Datenpunkten weiß die `geom_bar()` Funktion nicht, wo welcher Datenpunkt hinsoll. Versuchen wir es also nochmal, und spezifizieren wir `Sepal.Width` als `x`-Variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=dataset)+\n  geom_bar(aes(x=Sepal.Width))\n```\n\n::: {.cell-output-display}\n![](dataviz_ggplot2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nWie wir sehen, haben wir nun die Variable `Sepal.Width` erfolgreich visualisiert und entdecken eine Normalverteilung.\n\nDa es sich bei `geom_bar()` um ein Histogramm handelt, müssen wir lediglich die `x`-Variable übergeben, da für die `y`-Variable automatisch gezählt wird.\n\nAngenommen, wir möchten die Farbe verändern, sodass die Balken die Farbe rot haben. Dann müssen wir dies als `fill` Parameter der `geom_bar()` Funktion übergeben:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=dataset)+\n  geom_bar(aes(x=Sepal.Width), fill=\"red\")\n```\n\n::: {.cell-output-display}\n![](dataviz_ggplot2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nNun sind alle Balken rot. Was ist aber, wenn wir wollen, dass die Balken **in Abhängigkeit einer Variable** verschiedenfarbig sind? Dann müssen wir die `fill` Variable in der `aes()` Funktion übergeben:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=dataset)+\n  geom_bar(aes(x=Sepal.Width, fill=Species))\n```\n\n::: {.cell-output-display}\n![](dataviz_ggplot2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nPerfekt! Auf einen Blick können wir sehen, dass Pflanzen der Spezies `setosa`eher größere `Sepal.Width` haben. Bis jetzt haben wir allerdings nur einen Befehl mithilfe des `+` Operators verknüpft. Angenommen, uns stören die Achsenbeschriftungen und wir wollen einen Titel haben. Auch das ist einfach möglich:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=dataset)+\n  geom_bar(aes(x=Sepal.Width, fill=Species))+\n  ylab(\"Prevalence\")+\n  xlab(\"Width of Sepal\")+\n  ggtitle(\"Sepal width of Iris Flower for each Species\")\n```\n\n::: {.cell-output-display}\n![](dataviz_ggplot2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nDie Farben sehen noch etwas langweilig aus. Ein kurzer Blick auf [**colorhunt.co**](https://colorhunt.co/palettes/popular) inspiriert uns und wir wollen nun die Farben `#9A208C`, `#E11299` und `#F5C6EC` als Farben haben. Das können wir über `scale_fill_manual()` machen. Dazu speichern wir die Farben einfach in einen Vektor namens `palette` und übergeben diesen als Parameter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalette <- c(\"#9A208C\",\"#E11299\",\"#F5C6EC\")\n\nggplot(data=dataset)+\n  geom_bar(aes(x=Sepal.Width, fill=Species))+\n  ylab(\"Prevalence\")+\n  xlab(\"Width of Sepal\")+\n  ggtitle(\"Sepal width of Iris Flower for each Species\")+\n  scale_fill_manual(values = palette)\n```\n\n::: {.cell-output-display}\n![](dataviz_ggplot2_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nWir hätten nun gerne noch einen schwarzen Rand um die Balken. Dabei hilft uns der Parameter `colour` in `geom_bar()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=dataset)+\n  geom_bar(aes(x=Sepal.Width, fill=Species), color=\"#2b2b2b\")+\n  ylab(\"Prevalence\")+\n  xlab(\"Width of Sepal\")+\n  ggtitle(\"Sepal width of Iris Flower for each Species\")+\n  scale_fill_manual(values = palette)\n```\n\n::: {.cell-output-display}\n![](dataviz_ggplot2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\nJetzt stört uns nur noch der Hintergrund, und dann sind wir zufrieden. `ggplot` bietet verschiedene themes, die wir einfach über den `+` Operator verwenden können. Wir entscheiden uns für `theme_classic()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=dataset)+\n  geom_bar(aes(x=Sepal.Width, fill=Species), color=\"#2b2b2b\")+\n  ylab(\"Prevalence\")+\n  xlab(\"Width of Sepal\")+\n  ggtitle(\"Sepal width of Iris Flower for each Species\")+\n  scale_fill_manual(values = palette)+\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](dataviz_ggplot2_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nSuper! Ein publizierfähiges Plot in 7 Zeilen wiederverwendbarem Code. An diesem Beispiel haben wir gesehen, wie einfach das mit `ggplot` und das verketten von Befehlen geht. Im Folgenden wollen wir euch noch eine Auswahl an Visualisierungsfunktionen vorstellen, die wir häufig benötigen.\n\n## Visualisierungsfunktionen\n\nWie bereits beschrieben, sind `geom_` die Visualisierungsfunktionen. Jenachdem, wie unsere Daten strukturiert sind, bietet sich einige davon mehr, andere weniger an. Eine sinnvolle Einteilung geht **von den Achsen** bzw. **zu visualisierenden Variablen** aus. Dabei sollten wir uns immer die Frage stellen:\n\n> Wieviele Variablen möchte ich darstellen?\n\nIn einem 2-dimensionalen Koordinatensystem können wir natürlich erstmal nur zwei Variablen darstellen. Allerdings erlaubt uns `ggplot` auch die Visualisierung von mehr Variablen. So können wir etwa über `fill` bzw. `colour` weitere Variablen visualieren. Eine weitere Frage, die wir uns in diese Richtung stellen sollten, ist:\n\n> Was für einen Datentyp haben die zu visualisierenden Variablen?\n\nJe nachdem, wie die wir diese Fragen beantworten, bieten sich dann verschiedene Funktionen an. Im obigen Beispiel haben wir **eine Variable** (`Sepal.Width)`**,** welche **intervall**skaliert ist. Dafür bietet sich entsprechend ein Histogramm bzw. `geom_bar()`an. Doch was ist, wenn wir **zwei intervallskalierte** Variablen haben? Hier könnten wir bspw. die `geom_point()` Funktion benutzen. Für solche Fragestellungen kann das **ggplot Cheatsheet** sehr hilfreich sein:\n\n[![](assets/img/ggplot_cheatsheet.png){fig-align=\"center\" width=\"300\"}](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf)\n\nNeben geom_bar wollen wir zwei weitere, häufig benötigte Funktionen, sowie deren Kombination zeigen: `geom_point()` und `geom_smooth()`.\n\n### geom_point()\n\nAngenommen, wir haben zwei intervallskalierte Variablen, die wir visualisieren wollen. Dann bietet sich `geom_point()` an. Versuchen wir also mal, die Verteilung von `Sepal.Width` und `Sepal.Length` zu visualisieren.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=dataset)+\n  geom_point(aes(x=Sepal.Width,y=Sepal.Length))\n```\n\n::: {.cell-output-display}\n![](dataviz_ggplot2_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nSuper! Nun wäre es praktisch, wenn wir auch noch die Variable `Species` einbringen könnten. Dies können wir durch `colour` in `aes()` tun.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=dataset)+\n  geom_point(aes(x=Sepal.Width,y=Sepal.Length,color=Species))\n```\n\n::: {.cell-output-display}\n![](dataviz_ggplot2_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nAuch hier sehen wir direkt, dass es einen Unterschied zwischen den verschiedenen Spezies zu geben scheint. Visuell können wir auch den (offensichtlichen) Zusammenhang zwischen `Sepal.Width` und `Sepal.Length` erkennen. Um das aber noch etwas besser zu verstehen, legen wir eine Regressionsgrade mithilfe von `geom_smooth()` rein. Das können wir über den `+` Operator tun - denn in `ggplot` können wir alle Visualisierungsfunktionen nach Belieben \"stapeln\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=dataset)+\n  geom_point(aes(x=Sepal.Width,y=Sepal.Length,color=Species))+\n  geom_smooth(aes(x=Sepal.Width,y=Sepal.Length), method=\"lm\") # lm for linear model\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](dataviz_ggplot2_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nDie Regressionsgrade zeigt einen negativen Zusammenhang, obwohl wir offensichtlich einen positiven Zusammenhang vorliegen haben. Das liegt daran, dass `geom_smooth()` unseren Faktor `Species` nicht berücksichtigt. Dies können wir ändern, indem wir in dessen `aes()` Funktion ebenfalls `colour` übergeben.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=dataset)+\n  geom_point(aes(x=Sepal.Width,y=Sepal.Length,colour=Species))+\n  geom_smooth(aes(x=Sepal.Width,y=Sepal.Length, colour=Species), method=\"lm\") # lm for linear model\n```\n\n::: {.cell-output-display}\n![](dataviz_ggplot2_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\nVoila! Wir sehen unsere drei kleinen Regressionsgraden und den erwarteten positiven Zusammenhang.\n\n## Fazit & Weitere Resourcen\n\nWir haben nun gelernt, wie wir mithilfe von `ggplot` Daten visualisieren können. Natürlich war das nur die Spitze des Eisbergs, und noch viel mehr ist möglich. Einige dieser Dinge werden wir im weiteren Verlauf des Seminars kennenlernen, wenn es um das Arbeiten (und Visualisieren) von konkreten Datensätzen geht. Im Laufe des Seminars werden wir auch eine eigene \"nice to know\" Seite erstellen, auf der wir zusätzliches Wissen sammeln.\n\nNeben dieser Website hier (🥳) gibt es natürlich noch viele weitere, tolle Resourcen im Internet. Neben den offziellen Dokumentationen bspw. auf tidyverse oder CRAN wollen wir euch vor allem mit Blick auf `dplyr` und `ggplot` noch einige ans ❤️ legen:\n\n-   [**sthda.com**](http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization)**:** Be Awesome in ggplot2: A Practical Guide to be Highly Effective - R software and data visualization\n\n-   [**r-graph-gallery.com**](https://r-graph-gallery.com/index.html): A collection of charts made with the R programming language\n\n-   [**r-bloggers.com**](https://www.r-bloggers.com/2018/05/dplyr-a-beginners-guide/): DPLYR: A beginner's guide\n",
    "supporting": [
      "dataviz_ggplot2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}