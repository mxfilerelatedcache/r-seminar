---
title: "Hausaufgabe 2: Deskriptives"
author: "Simon Krukowski & Kira Wolff"
---

### Aufgabe 1 \[1 Punkt\]

In der letzten Seminarstunde habt ihr einiges über statistische Verfahren in R gelernt. In dieser Hausaufgabe geht es darum, dieses Wissen anzuwenden. In der Stunde habt ihr außerdem gelernt, warum es wichtig und sinnvoll ist, zu Beginn eines jeden Quarto-Dokuments einen "Info-Chunk" zu erstellen, in dem ihr alle benötigten Packages aktiviert etc.

Erstellt nun einen solchen Chunk und nennt ihn `preliminaries`. Ladet darin das Package `datarium` (installiert es vorher ggf. über die Konsole), sowie alle weiteren Packages, die ihr benötigt. Speichert das darin enthaltene Dataset `genderweight` als `dataset`.

Außerdem kann es hilfreich sein, dort direkt eine Farbpalette (bspw. mit 4 Farben, definiert als hex codes) in einem Vektor zu speichern. Holt euch bspw. bei colorhunt.co Inspiration und speichert eine solche Palette darin ab.

Stellt außerdem sicher, dass der Chunk keine Warnungen anzeigt beim rendern (hint: chunk-options).

```{r}
#| warning: false
library(tidyverse)
library(datarium)
dataset <- genderweight
palette <- c("#8B1874","#B71375","#FC4F00","#F79540")
```

### Aufgabe 2 \[1 Punkt\]

Schaut euch den Datensatz an, um ein Gefühl dafür zu bekommen. Gebt euch dazu wahlweise den Datensatz selbst, oder bspw. gruppierte Outputs über `dplyr` an. Wir wollen, dass die Tabellenoutputs nach dem Rendern nicht im default Format dargestellt werden. Stellt das entsprechend im YAML Header ein.

```{r}
dataset %>% 
  group_by(group) %>% 
  summarise(mean(weight))

dataset
```

### Aufgabe 3 \[1 Punkt\]

Prüft nun die Variable `weight` auf Normalverteilung. Macht das wahlweise über einen Test, oder ein Diagramm:

```{r}
dataset %>% 
  ggplot()+
    geom_qq(aes(sample=weight))+
    theme_minimal()
```

Ist die Variable normalverteilt? Begründe kurz:

*Antwort hier:* Nein, da die Punkte eindeutig nicht der Form einer 45°-Geraden folgen.

### Aufgabe 4 \[1 Punkt\]

Unabhängig davon, was wir gerade herausgefunden haben, entscheiden wir uns dazu, einen t-Test zu rechnen, und die Mittelwerte von `weight` miteinander zu vergleichen. Wir haben die Vermutung, dass Männer ein höheres Gewicht haben. Berücksichtigt das und rechnet den Test (hint: gerichtetes Testen). Was kommt heraus?

```{r}
t.test(weight ~ group, dataset, alternative = "less")

dataset %>%
  t_test(weight~group, alternative ="less")
  
```

*Antwort: Der Test ist signifikant, es gibt einen signifikanten Unterschied zwischen Männern und Frauen bezüglich Gewicht.*

### Bonus:

Was hat die Überschrift zu bedeuten und wie könnte das mit Voraussetzungen zu tun haben?

*Antwort hier: \[Nur relevant, wenn man t.test und nicht t_test gerechnet hat\] Der Output hat die Überschrift "Welch Two Sample t-test", d.h. R hat automatisch den non-parametrischen Test gerechnet, falls Normalverteilung nicht gegeben ist.*

### Aufgabe 5 \[1 Punkt\]

Angenommen, wir hätten in der Zwischenzeit herausgefunden, dass die Variable `weight` nicht normalverteilt ist. Welcher Test bietet sich dann stattdessen an? Rechnet diesen.

```{r}
wilcox.test(dataset$weight ~ dataset$group, alternative = "less")
```

### Aufgabe 6 \[1 Punkt\]

Im Datensatz `stress` (auch aus datarium) wird die Auswirkung einer neuen Behandlungsmethode (`treatment`) auf einen Stress-Score (`score`) dargestellt. Berechnet die entsprechende AN(C)OVA, unter Berücksichtigung des Alters (`age`) als Kovariate.

```{r}
stress %>% 
  anova_test(score ~ treatment + age)

stress %>% 
  anova_test(dv = score,
             between = treatment,
             covariate = age)
```

### Aufgabe 7 \[1 Punkt\]

Erstellt den zu Aufgabe 6 passenden Boxplot (ohne Kovariate).

Gestaltet den Boxplot:

-   mit Farben aus euer oben festgelegten Palette

-   mit einem anderen theme

-   mit einem weiteren, passenden geom

```{r}
stress %>% 
  ggplot()+
  geom_boxplot(aes(treatment, score))+
  geom_jitter(aes(treatment, score, color=treatment), width=0.05)+
  scale_color_manual(values = palette)+
  theme_minimal()
  
```

### Aufgabe 8 \[1 Punkt\]

Wir interessieren uns nun auch für Zusammenhänge zwischen Daten. Dazu schauen wir uns wieder das bekannte `iris` data set an. Primär interessiert uns, ob `Sepal.Width` und `Sepal.Height` zusammenhängen. Um also zunächst eine Idee über die Verteilung der Daten zu bekommen, sollt ihr mit `ggplot` ein Diagramm erstellen. Darin sollen mehrere Sachen enthalten sein:

-   Bivariates Streudiagramm (hint: ihr wollt Punkte plotten)

-   Eine Regressionsgrade (hint: `geom_smooth()` ist euer Freund)

```{r}
iris %>% 
  ggplot(aes(x=Sepal.Length,y=Sepal.Width)) +
  geom_point()+
  geom_smooth(method="lm", se=F)+
  theme_minimal()
```

Rechnet auch eine Pearson-Korrelation zwischen den beiden Variablen:

```{r}
cor.test(iris$Sepal.Length,iris$Sepal.Width)
```

Was lässt sich über den Zusammenhang der beiden Variablen sagen?

*Antwort: Die Korrelation ist klein und negativ, aber nicht signifikant.*

### Aufgabe 9 \[1 Punkt\]

Wir haben nun die Annahme, dass die Spezies der Pflanzen außerdem einen Einfluss auf den Zusammenhang zwischen den beiden Variablen hat. Dazu sollt ihr zunächst die Punkte in Abhängigkeit von `Species` einfärben:

```{r}
iris %>% 
  ggplot(aes(x=Sepal.Length,y=Sepal.Width)) +
  geom_point(aes(color=Species))+
  geom_smooth(method="lm")
```

Wir haben nun das Gefühl, dass ein Zusammenhang zwischen den beiden Variablen besteht und uns dazu entschieden, ein Regressionsmodell zu berechnen, in dem wir `Sepal.Length` als abhängige Variable haben, sowie `Species` und `Sepal.Width` als Prädiktoren. Berechnet ein solches Modell und speichert es als `model`:

```{r}
model <- lm(Sepal.Length ~ Sepal.Width + Species, iris)
```

### Aufgabe 10 \[1 Punkt\]

Nun wollen wir die Ergebnisse der Regressionsanalyse entsprechend berichten. Aus Übungsgründen sollt ihr dabei auf Packages wie `stargazer()` verzichten. Ihr habt im Seminar inline-Code gelernt. Verwendet diesen, um die Ergebnisse entsprechend zu berichten. Dazu bietet es sich an, den Output von `summary()` in einem Objekt zu speichern, und dann auf die Werte zuzugreifen. Denkt dran: über den `$` Operator sowie `['variable']` könnt ihr auf einzelne Werte zugreifen.

```{r}
sum <- summary(model)
```

Ergänzt also die F-Statistik in folgendem Satz:

> Die Regression mit *Sepal.Width* als abhängige und *Sepal.Length* und *Species* als erklärende Variablen ist signifikant, *F* (3,146) = `r round(sum$fstatistic[1], 2)`, *p* \< .001.

### Aufgabe 11 \[Bonus\]

Was macht die `paste0` Funktion und könnte man die obige Lösung damit vereinfachen?

*Dabei werden Elemente eines Vektors in Character umgewandelt und ohne Trennzeichen aneinandergehängt. Den Antwortsatz oben hätte man dementsprechend auch über paste0 zusammenbasteln können.*
