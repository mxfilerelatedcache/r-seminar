---
title: "Hausaufgabe 4: Umgang mit Fragebogendaten"
author: "Simon Krukowski & Kira Wolff"
execute: 
  eval: FALSE
---

# Beschreibung

Falls ihr an einer Stelle mal nicht weiterkommen solltet, sodass die folgenden Aufgaben nicht mehr lösbar sind, meldet euch bitte bei uns.

### Punkte

Für jede Aufgabe bzw. Teilaufgabe gibt es Punkte - diese sind entsprechend kenntlich gemacht. Insgesamt gibt es für jedes Aufgabenblatt 10 Punkte. Aufgaben, die als **\[Bonus\]** markiert sind, geben keine Punkte.

### Für Experten

Manche Aufgaben erfordern Transferwissen, welches ihr im heutigen Seminar so nicht direkt gelernt hat. Diese Aufgaben sind als **\[Für Experten\]** markiert - hier berücksichtigen wir nicht nur die Lösung, sondern schon eure Lösungsversuche (falls ihr auf keine Lösung kommt).

### Abgabe \[+ .html\]

Um eure Hausaufgabe abzugeben, ladet diese bitte zum die `.qmd` Datei und die gerenderte `.html` Datei im Moodle hoch. Etwaige anderer Dateien (assets-Ordner usw.) müsst ihr nicht hochladen. Bitte benennt die Dateien entsprechend (bspw. `hausaufgabe2_simon_krukowski.qmd`, und schreibt hier in der Datei oben bei `author` euren Namen rein.

# Aufgaben

### Aufgabe 1 \[1 Punkt\]

Erstellt wie immer als Erstes einen Chunk mit den notwendigen Packages. Ladet auch die Datei `dataset_srl_challenges_wrangled.csv`. Ihr findet sie im Moodle. Dort sind die berechneten Subskalen aus der Sitzung schon enthalten.

```{r}
library(tidyverse)

dataset <- read.csv("dataset_srl_challenges_wrangled.csv")


palette2 <- c("#CC79A7","#D55E00","#0072B2","#F0E442","#009E73","#56B4E9","#E69F00","#000000")
```

### Aufgabe 2 \[2 Punkte\]

Da ihr in der Seminarsitzung nicht selbst die Gelegenheit hattet, den Mediansplit und das Interaktionsdiagramm zu erstellen, geben wir euch hier noch mal Gelegenheit dazu!

Diesmal interessieren der Zusammenhang von zwei Subskalen der Gewissenhaftigkeit, `gh_fleiss` und `gh_ordnungsliebe` und außerdem wie sich der Zusammenhang je nach Alter (`dmAge`) verhält.

-   Erstellt eine neue Variable, in der ihr die Probanden in "younger" und "older" einteilt, je nachdem ob ihr Alter geringer/gleich oder höher als der Alters-Median ist
-   Erstellt einen Scatterplot mit Regressionsgerade(n) für den Zusammenhang von Fleiß und Ordnungsliebe.
-   Splittet den Plot in zwei Farben, je nach Ausprägung der neuen Altersvariable.

```{r}
dataset$age.med <- ifelse(dataset$dmAge <= median(dataset$dmAge, na.rm=T), "younger", "older")

dataset %>% 
  ggplot(aes(gh_fleiss, gh_ordnungsliebe, color=age.med))+
    geom_jitter()+
    geom_smooth(method="lm", se=F)+
    theme_minimal()
```

### Aufgabe 3 \[3 Punkte\]

Mittlerweile habt ihr gelernt, wie ihr mit `group_by()` und `summarise()` Mittelwerte für einzelne Gruppen berechnet, und wie ihr über `pivot_longer()` Daten so aufbereitet, dass sie für etwaige Plots besser geeginet sind. Nun sollt ihr selbst ein Plot erstellen - und zwar nicht irgendeins, sondern ihr sollt folgendes Plot reproduzieren:

![](assets/img/desired_plot.png){fig-align="center" width="700"}

Den Datensatz dazu haben wir ja bereits in der letzten Seminarstunde kennengelernt (`dataset_srl_challenges.csv`). Die Farben müssen natürlich nicht die gleichen sein - lasst euch also gerne etwas einfallen.

```{r}
dataset %>% 
  select(dmLivingSit, starts_with("pres_")) %>% 
  group_by(dmLivingSit) %>% 
  summarise(across(pres_umfeld:pres_material, mean),n=n()) %>% 
  filter(n>1) %>% 
  tidyr::pivot_longer(pres_umfeld:pres_material) %>% 
  ggplot(aes(y=name,x=value))+
           geom_col(aes(fill=name),color="#2b2b2b")+
           theme_classic()+
           facet_wrap(dmLivingSit ~ .)+
           scale_fill_manual(values=scales::seq_gradient_pal("#c7a9a3", "#efcd9c", "Lab")(seq(0,1,length.out=5)))+
  ylab("SRL Problembereich")+
  labs(fill="SRL Problembereich")
```

### Aufgabe 4 \[3 Punkte\]

Schaut euch den folgenden Code an und überlegt, was er macht und wie man ihn optimieren könnte. Ergänzt im Anschluss, wie ihr das gleiche Ergebnis auf "optimierte" Art und Weise erzielen könntet.

Hinweis: Es gibt mindestens drei Funktionen/Schreibweisen, die ihr kennengelernt habt, die euch hier helfen können.

```{r}
spalten <- c("hsf1_VVW01", "hsf1_VSL01", "hsf1_KIZ01", "hsf1_RAB01", "hsf1_VUL01", "hsf1_UA02",  "hsf1_MIW01", "hsf1_MSW01", "hsf1_TTL02", "hsf1_PU02",  "hsf1_RRB03", "hsf1_TTK01", "hsf1_MPR03", "hsf1_A02", "hsf1_MLM01", "hsf1_TTF01", "hsf1_RFL01", "hsf1_UVG02", "hsf1_MWL02", "hsf1_MNL02", "hsf1_PMK01", "hsf1_PU03",  "hsf1_RNE01", "hsf1_ZSP03")
  
spalten.rekodiert <- ifelse(dataset[,spalten] == 1, 5,
                      ifelse(dataset[,spalten] == 2, 4,
                             ifelse(dataset[,spalten] == 3, 3,
                                    ifelse(dataset[,spalten] == 4, 2,
                                           ifelse(dataset[,spalten] == 5, 1, NA)))))

dataset.new <- cbind(dataset, spalten.rekodiert)

```

```{r}
dataset.new <- dataset %>% 
  mutate(across(starts_with("hsf1"), function(x) case_when(x == 1 ~ 5,
                                                          x == 2 ~ 4,
                                                          x == 3 ~ 3,
                                                          x == 4 ~ 2, 
                                                          x == 5 ~ 1)))
```

### Aufgabe 5 \[1 Punkt\]

Wir wissen, dass die Studie an zwei verschiedenen Orten durchgeführt wurde (`location`). Uns interessiert nun, ob die Erhebung an diesen Orten in etwa im gleichen Zeitraum stattgefunden hat, oder zetlich versetzt. Dazu können wir `submitdate` betrachten. Erstellt ein Density-Plot mit `ggplot` (-\> `geom_denisity`) und berücksichtigt dabei die verschiedenen Erhebungsorte.

Hinweis: So wie es `as.factor()` gibt, gibt es auch `as.Date()`

```{r}
dataset %>% 
  mutate(submitdate = as.Date(submitdate)) %>% 
  ggplot()+
  geom_density(aes(x=submitdate,fill=location))+
  theme_classic()+
  scale_x_date(date_breaks = "7 days")+
  scale_fill_manual(values=palette2)
```
