---
title: "Hausaufgabe 2: Deskriptives"
author: "Kira Wolff & Simon Krukowski"
execute: 
  eval: FALSE
---

## Aufgabe 1

Am Anfang von fast jedem R-Code aktiviert man erst mal die notwendigen Packages und lädt den relevanten Datensatz. Wir schauen uns hier einen Datensatz aus dem Package `nycflights13` an. Installiert und aktiviert dementsprechend die Packages `nycflights13`, `dplyr` und `ggplot2.` (Denkt auch daran, welche Packages ihr installieren und welche vielleicht nur aktivieren müsst..)

```{r}
# Hier Lösung einfügen
library(dplyr)
library(ggplot2)
library(nycflights13)
```

Der Datensatz, mit dem wir nun arbeiten, nennt sich `flights`. Unter diesem Namen könnt ihr ihn nach erfolgreicher Aktivierung von `nycflights13` finden. Er enthält alle Flüge, die im Jahr 2013 in New York losgeflogen sind. Mehr Informationen zu den Variablen könnt ihr über die Hilfefunktion bekommen.

Hinweis: Speichert euch bei den folgenden Aufgaben eure Änderungen an `flights` in Objekten mit einem anderen Namen, damit ihr - falls etwas schief geht - immer wieder auf das Original zurückgreifen könnt.

```{r}
# Nur mal zum Anschauen:
flights
```

## Aufgabe 2

Ergänzt `flights` um eine weitere Spalte, in der die Verspätungen bei Ankunft und Abflug (`arr_delay` und `dep_delay`) miteinander verrechnet werden. Gestaltet den Code so, dass ihr auch bei späteren Aufgaben auf die Spalte zugreifen könntet.

Verwendet die Pipe und die euch bekannten `dplyr`-Befehle.

```{r}
# Hier Code zur Lösung eintragen

flights2 <- flights %>%
              mutate(sum_delay = dep_delay + arr_delay)
```

## Aufgabe 3

Sortiert flights so, dass ihr einmal die geringste und einmal die größte Verspätung bei Ankunftszeit entnehmen könnt.

```{r}
# Hier Code zur Lösung eintragen

flights2 %>% 
  arrange(desc(arr_delay))

flights2 %>% 
  arrange(arr_delay)
```

## Aufgabe 4

Wie interpretiert ihr die Ergebnisse aus Aufgabe 3?

*Antwort hier:* Die geringsten Verspätungen sind negativ - d.h. manche Flüge kommen sogar zu früh.

## Aufgabe 5

Für welche Variablen eignet sich `group_by` typischerweise bei einer "klassischen" Komedia-Studie; wofür hättet ihr sie beispielsweise bei eurer Bachelorarbeit verwenden können?

*Antwort hier:* z.B. um die Probanden bezüglich ihrer deskriptiven Eigenschaften zu beschreiben und dabei Kontrollgruppe und Experimentalgruppe zu unterscheiden.

## Aufgabe 6

Erstellt mittels summarize eine Tabelle, in der für jeden Monat der die durchschnittliche Distanz (Spalte `distance`) der Flüge und ihre Standardabweichungen angegeben werden.

Verwendet die Pipe und die euch bekannten `dplyr`-Befehle.

```{r}
# Hier Code als Antwort eintragen
dist_summary <- flights2 %>% 
                  group_by(month) %>% 
                  summarize(dist_mean = mean(distance),
                            dist_sd = sd(distance))
```

## Aufgabe 7

Verwendet die in Aufgabe 6 erstellte Tabelle, um mit `ggplot` und `geom_point` einen Plot zu erstellen, in dem auf der x-Achse die Monate und auf der y-Achse die durchschnittliche Distanz zu sehen ist.

```{r}
# Hier Code als Antwort eintragen
ggplot(dist_summary)+
  geom_point(aes(month, dist_mean))+
  theme_minimal()
```

## Aufgabe 8 für Experten

Fügt dem Plot aus Aufgabe 7 außerdem Standardabweichungen mithilfe von `geom_errorbar()` hinzu. (Hinweis: Alles, was ihr für den Input bei geom_errobar() benötigt, befindet sich bereits in der Tabelle von Aufgabe 6)

```{r}
# Hier Code als Antwort eintragen
ggplot(dist_summary)+
  geom_point(aes(month, dist_mean))+
  geom_errorbar(aes(x = month, ymin = dist_mean-dist_sd, ymax = dist_mean+dist_sd))+
  theme_minimal()
```

## Aufgabe 9

Gestaltet den Plot aus Aufgabe 7 oder 8 ästhetischer, indem ihr

-   einen Titel hinzufügt

-   die Farbe der Punkte zu eurer Lieblingsfarbe verändert

-   die Achsen beschriftet

```{r}
# Hier Code als Antwort einfügen
ggplot(dist_summary)+
  geom_point(aes(month, dist_mean), color = "dark blue")+
  ggtitle("Durchschnittliche Flugdistanz pro Monat")+
  xlab("Monat")+
  ylab("Distanz [Meilen]")+
  theme_minimal()
```

## Aufgabe 10

Recherchiert geom_jitter und beschreibt in eigenen Worten, was die Funktion macht und in welchen Fällen sie besonders nützlich ist.

*Antwort hier:* Die Funktion fügt den Punkten eine kleine, zufällige Verschiebung hinzu, die vor allem Plot übersichtlicher macht, in denen sich viele Punkte überlagen, z.B. bei ordinalen Daten
