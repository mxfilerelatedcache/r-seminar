---
title: "Folien der ersten Sitzung"
---

# Organisatorisches

## Ziele des Seminars

-   Daten einlesen, bearbeiten, grafisch darstellen und statistisch auswerten
-   Einblick in Breite und Tiefe, die R bietet
-   Grundlagen schaffen, auf die ihr selbstständig aufbauen könnt (z.B. für Masterarbeit oder eigene Projekte)

## Zeitplan

-   7-8 Sitzungen, die jeweils 3h dauern
    -   Mittagspause?
-   31.05 vrsl. letzte, kürzere Sitzung
-   Inhaltlich: Basics, Deskriptives, Inferenzstatistik, Auswertung von Forschungsdaten
-   innerhalb der Sitzung: abwechselnd Blöcke von Theorie + Praxis
-   Website für Präsentationsinhalte, Lösungen, Cheatsheets usw. (selbst Notizen machen lohnt sich auch!)

## Prüfungsleistung

-   Wöchentliche "Hausaufgaben": Wiederholen und erweitern das im Seminar Gelernte

    -   Abgabe per Moodle spätestens am Sonntag vor der nächsten Sitzung

    -   werden benotet, am Ende per Durchschnitt zusammengefasst und machen gemeinsam 50% der Note aus

    -   Abgabe mit der schlechtesten Benotung wird aus der Durchschnittsberechnung entfernt

    -   Einzelarbeit (Plagiatscheck)

    -   Wir laden nach Abgabe "Musterlösung" hoch

-   1x Hausaufgabe vorstellen (unbenotet)

-   Bericht zu (neuem) Datensatz einreichen (50% der Note) - mehr Infos folgen

Es gibt keine Anwesenheitspflicht, wir empfehlen aber immer da zu sein, da euch die Prüfungsleistungen dann leichter fallen werden.

## Vorstellungsrunde

Verteilung Vorwissen

![](folien/unnamed-chunk-12-1.png){fig-align="center" width="800"}

Vorwissen Programmiersprachen

![](folien/unnamed-chunk-18-1.png){fig-align="left" width="800"}

Erwartungen ans Seminar

![](folien/unnamed-chunk-20-1.png){fig-align="left" width="800"}

# R Grundlagen

## Was ist R?

-   Programmiersprache (und -oberfläche) für statistische Berechnungen und Grafiken
-   open-source & kostenlos
-   große Community, die ständig Funktionen erweitert und bei Problemen hilft
-   R Studio ist die meistgenutzte Benutzeroberfläche und macht die Handhabung einfacher

## User Interface

![](folien/.R.png){width="700" height="600"}

-   oben links: Code

-   unten links: Konsole - ausgeführter Code und Output

    -   hier lässt sich auch Code eintippen, dieser kann allerdings nicht gespeichert werden

-   oben rechts: u.a. Environment - welche Objekte und Daten exisitieren

-   unten rechts: Dateizugriff, Plotanzeige, Hilfeanzeige, Package-Übersicht

## Code erstellen + ausführen

-   *Öffnet das File das ihr auf der Seite mit unseren Installationstips heruntergeladen habt (vielleicht ist es auch noch offen)*
-   In dem File ist nur die Zeile ohne `#`ausführbarer Code. Wie hier geschehen, lassen sich mit `#` Kommentare in den Code hinzufügen, die dem Code Struktur geben oder erklären, was hier passieren soll
-   *Führt die Zeile Code aus, in dem ihr euren Cursor in die Zeile stellt und **STRG+ENTER** drückt*
-   Über das Markieren von mehreren/allen Zeilen werden die entsprechenden Zeilen nacheinander ausgeführt

```{r echo=T, eval = FALSE}
# Erstes Skript zum Seminar Medienbasierte Wissenskonstruktion: R

# Satz in Konsole printen:
print(paste0("Ich habe ",R.version$version.string," und RStudio v",rstudioapi::versionInfo()$version))
```

```{r echo=F, eval=TRUE}
print("Ich habe R version 4.2.1 (2022-06-23 ucrt) und RStudio v2023.3.0.386")
```

## .R vs. Quarto

-   R's Standardformat sind .R-Dateien

-   Für "echte Arbeit" mit R sind Quarto-Dokumente meistens nützlicher:

    -   ermöglichen Export/Rendern in andere Dateiformate (html, pdf, docx, pptx,...)
    -   ermöglichen neben Code-Abschnitte auch Text-Abschnitte, die formatiert werden können (wie LaTeX)
    -   ermöglichen einzustellen, ob nur Code, nur Output, oder Code+Output angezeigt werden soll
    -   Auswertung & Bericht können somit im gleichen Dokument geschehen

![](Asset%201vs.png){fig-align="center"}

## Quarto
### Dokument aufsetzen

-   *Erstellt ein Quarto-Dokument über File \> New File \> Quarto Document*
-   Im auftauchenden Fenster könnt ihr einstellen:
    -   Titel & AutorIn des Dokuments
    -   gewünschtes Output-Format (hier: html)
    -   womit das Quarto-Dokument gerendert werden soll (hier: knitr)

### Im Dokument

-   Der Kasten oben heißt "YAML-header" - dort sind die Rendereinstellungen (Titel, Speicherort, Format, Schriftgröße usw.)
-   Im Feld darunter kann Text geschrieben und formatiert werden
    -   Source: Format lässt sich über bestimmte Zeichen einstellen
    -   Visual: Format lässt sich über Markieren + Auswählen einstellen
-   Code kann man nur innerhalb von Chunks einfügen (oben rechts auf das grün unterlegte C klicken oder STRG+ALT+I)
-   Im grau unterlegten Kästchen lässt sich "normaler" R-Code schreiben und ausführen
    -   "Vorschau" über den Play-Button
    -   Über `#|` am Zeilenbeginn lässt sich einstellen, was mit Code + Output beim Rendern passieren soll
-   Über "Render" wird das Dokument in das Zielformat umgewandelt
-   In den meisten Fällen rendert man nur gegen Ende und nutzt während der Analyse die Chunk-Vorschau

## Quarto

-   *Erstellt zwei Code-Chunks*
-   *Fügt bei einem der Chunks in die erste Zeile `#| echo: TRUE`*
-   *Fügt beim anderen Chunk in die erste Zeile `#| echo: FALSE`*
-   *Schreibt in den Text- und in die Code-Bereiche `4+5`*
-   *Rendert das Dokument*

Output ohne Code:

```{r}
4+5
```

Output mit Code:

```{r}
#| echo: TRUE
4+5
```

Reiner Text:

4+5

## (Rechen)Operatoren

-   Dezimaltrennzeichen: Punkt `.` , nicht Komma `,`
-   `+ - * /`
-   Exponent: `^`
-   logisch gleich: `==`
-   logisch ungleich: `!=`
-   logisches und: `&`
-   logisches oder: `|`
-   logisches exklusives oder: `xor`
-   nicht: `!`

## Objekte

-   Anstatt nur Code durchzuführen und das Ergebnis in der Konsole abzulesen, können wir auch alles mögliche als Objekte speichern
-   Konzept: links mit Objektname beginnen, dann den Zuweisungsoperator und anschließend das, was als Objekt gespeichert werden soll

```{r echo=T, eval=T}
ergebnis <- 3+5
```

-   R führt den Code rechts vom Pfeil aus - das Objekt ist "8", nicht "3+5"!
-   Objekte lassen sich abrufen, indem man ihren Namen schreibt und ausführt

```{r echo=T, eval=T}
ergebnis
```

-   R ist case-sensitive, d.h. Groß-und Kleinschreibung muss übereinstimmen!
-   Objekte lassen sich auch oben rechts im Environment einsehen (wird aber irgendwann unübersichtlich...)
-   *Erstellt selbst eine Rechenaufgabe und speichert sie als Objekt!*
-   *Was passiert, wenn man den gleichen Objektnamen erneut verwendet?*
-   Warum ist Objekte erstellen wichtig?
    -   Für R ist jeder Output sonst "flüchtig": Es wird nicht wirklich etwas verändert
    -   Zwischenergebnisse überprüfen
    -   Parameter festlegen
    -   Flüchtigkeitsfehler vermeiden
    -   uvm.
-   Shortcut für `<-` : ALT+-
-   Pfeil in die andere Richtung `->` und Gleichheitszeichen `=` funktionieren nicht bzw. sollten nicht verwendet werden!

## Funktionen

-   Mithilfe von Funktionen lassen sich Objekte/Daten bearbeiten

-   Beispiel: `round(3.45, digits = 1)` rundet 3.45 auf die erste Nachkommastelle

    -   am Anfang steht der Name der Funktion (auch hier: case-sensitive)

    -   die Argumente der Funktion werden von [runden]{.underline} Klammern eingerahmt

    -   Argumente sind bspw. die Daten, auf die die Funktion angewendet werden soll, aber auch weitere Einstellungen der Funktion, z.B. auf wie viele Nachkommastellen gerundet werden soll

    -   sie folgen der Syntax `Argument = Angabe`

    -   Argumente werden durch Komma getrennt

    -   manche Argumente sind zwingend notwendig, viele aber optional

    -   die Argumente einer Funktion haben eine bestimmte Reihenfolge, daher kann man den Argumentnamen häufig weglassen, z.B. `round(3.45, 1)` (solange man die Funktion noch nicht gut kennt, oder auch um den Überblick zu behalten, besser die Argumente explizit nennen)

## Hilfe in R

-   Über `help(Funktion)` wird die Hilfeseite/Dokumentation der Funktion "Funktion" aufgerufen

    -   genauso funktioniert `?Funktion`

    -   auf der Hilfeseite stehen mögliche Argumente, ihre Reihenfolge und in welchem Format das Argument angegeben wird (wird eine Zahl oder ein Wort erwartet?)

-   *Findet mit der Hilfe-Funktion heraus, was `mean()` macht und welche Argumente es hat*

```{r echo=TRUE, eval=FALSE}
?mean
#oder
help(mean)
```

## Hilfe außerhalb von R

-   Fehlermeldungen lesen und versuchen, Problem zu verstehen

-   das Internet!

    -   Fehlermeldung bei Google einfügen und Links durchsuchen

    -   Stack Overflow

    -   Statt selbst eine Frage einreichen zu müssen findet sich fast immer ein Thread mit dem gleichen/ähnlichen Problem und möglichen Lösungen

-   Danach: Lösung für sich dokumentieren

## Packages

-   Frisch nach der Installation besteht R aus Base R und einigen wenigen Erweiterungen

-   Durch die Installation von weiteren Paketen/Packages lassen sich die Funktionen fast beliebig erweitern: Jedes Package enthält Funktionen und/oder Datensätze, meistens zu bestimmten Analysen, mehr oder weniger nischig

-   Im Fenster unten rechts unter "Packages" könnt ihr sehen, welche Packages schon installiert und/oder aktiviert sind

-   Neue Packages lassen sich mit `install.packages("package-name")` installieren und mit `library(package-name)` aktivieren (auf die Anführungszeichen achten!)

-   Man kann neue Funktionen auch selbst schreiben, das ist aber meistens nur in Sonderfällen notwendig

-   *Installiert und aktiviert das Package `psych` (Erinnerung: `install.packages()`& `library()`)*

-   *Wendet die Hilfefunktion `help()` auf sich selbst an, um herauszufinden, wie ihr mit ihr Informationen über Packages bekommt*

-   *Schaut euch mit dem neuen Wissen an, welche Funktionen das Package `psych` beinhaltet*

```{r eval=FALSE, echo=T}
# Installieren
install.packages("psych")
# Aktivieren
library(psych)

# Mehr über help() herausfinden
help(help) # Inception!
# Aha, das Argument "package" kann mir weiterhelfen!

# Über psych informieren
help(package=psych)
```

## Datentypen I

-   Basic:

    -   **numeric:** Zahlen (integer, double)

    -   **character:** Buchstabenfolgen (strings)

    -   **factor:** z.B. Faktorstufen eines Faktors

    -   **logical:** TRUE, FALSE (vgl. 1 & 0)

-   **Vektor:** eindimensionale "Aufzählung" von Elementen

-   **Matrix:** ein- bis zweidimensionale Aufzählung von Elementen

-   **Array:** beliebig-dimensionale Aufzählung von Elementen

-   **Liste:** kann verschiedene Datentypen und Strukturen enthalten (z.B. Ergebnis einer ANOVA)

-   **Dataframe**, **Tibble**: Spezifische Formate, um Datensätze darzustellen

    -   Können pro Spalte unterschiedliche Datentypen beinhalten

    -   Standardformat, wenn man von extern Daten in R reinlädt

Der Datensatz aus der Umfrage sieht als Vorschau in der Konsole so aus:

```{r echo=F}
#| echo: F
#| warning: F
library(tidyverse)
library(readr)
umfrage <- read_csv("folien/dataset1.csv") %>% 
  select(id, age, sex, r_knowledge, r_knowledge_amount, r_problems, programming_knowledge, hopes_perc) %>% 
  mutate(id = id,
         alter = age,
         geschlecht = as.factor(sex),
         r.vorwissen = r_knowledge,
         r.wieviel.vorwissen = r_knowledge_amount,
         r.probleme = as.character(r_problems),
         programmier.vorwissen = programming_knowledge,
         age = NULL,
         sex = NULL,
         r_knowledge = NULL,
         r_knowledge_amount = NULL,
         r_problems = NULL,
         programming_knowledge = NULL,
         hopes_perc = NULL)
         
umfrage
```

-   

    1.  Zeile: Ein Tibble mit diesen Dimensionen wird angezeigt

-   

    2.  Zeile: Spaltennamen

-   

    3.  Zeile: Datentypen

-   folgende Zeilen: Daten

-   in der Konsole werden Daten meistens nur gekürzt angezeigt

-   Über `view(daten)` öffnet sich eine Tabellenübersicht

## Bestimmte Daten abrufen

-   In eckigen Klammern nach dem Objektnamen lassen sich die "Koordinaten" angeben

```{r echo=T}
umfrage[2,3] # zeigt den Wert der zweiten Zeile und dritten Spalte
```

-   Statt Zahlen können auch Spaltennamen benutzt werden

```{r echo=T}
umfrage[3, "geschlecht"]
```

-   Spalten lassen sich auch direkt über `$` ansprechen.

```{r}
#| echo: true
umfrage$geschlecht
```

-   Um alles anzeigen zu lassen, kann man die Koordinate "leer" lassen

```{r}
#| echo: true
umfrage[ , "geschlecht"]
```

```{r}
#| echo: true
umfrage[ , ]
```

## Datentypen II

-   R erkennt häufig von selbst, welcher Datentyp gemeint ist
-   Häufig ist es aber sinnvoll, noch mal "von Hand" zu überprüfen und/oder den richtigen Datentyp festzulegen
-   `typeof()` um den Datentyp zu erfragen
-   `is.numeric()` / `is.factor()` / `is.logical()` / `is.character()` um einen bestimmten Datentyp zu testen
-   `as.numeric()` usw. nutzen, um den Datentyp zu verändern

```{r echo=T}
umfrage$r.probleme <- as.factor(umfrage$r.probleme)
# Die umgewandelte Spalte überschreibt die alte Spalte!
```

## Neue Daten erstellen

-   Vektoren: `c()`
-   Kombiniert alle aufgezählten Objekte

```{r}
#| echo: true
vektor <- c(1,3,5)
vektor
```

-   Strings müssen in Anführungszeichen gesetzt werden, damit R sie nicht mit Objekten verwechselt.
-   Im Output erkennt man Strings auch an den Anführungszeichen

```{r}
#| echo: true
string <- "hallo"
string
```

## Unterschiede zu anderen Programmiersprachen

-   keine Unterscheidung zwischen integer und double
-   verwendet keine Pointer
-   tendenziell: Viele Angelegenheiten, bei denen andere Sprachen empfindlich sind, sind in R simpler aufgebaut
