---
title: "Ausreißeranalyse"
author: "Kira Wolff"
execute: 
  eval: false
---

```{r}
#| code-fold: true
#| warning: false
library(tidyverse)
library(outliers)
library(EnvStats)

palette1 <- c("#648fff","#785ef0","#dc267f","#fe6100","#ffb000","#000000","#ffffff")

# Daten: Das flights-dataset nach Bearbeitung des "Dates & Times"-Chapters
dataset <- dataset %>% 
  mutate(late = as.numeric(late))

dataset <- dataset %>% 
  mutate(late = as.numeric(difftime(arrival,scheduled_arrival,units = "mins")))
```

# Ausreißeranalyse

Inspiriert von dem Problem, das uns beim Plotten der verspäteten Flüge vorhin die extremen Verspätungen eingebrockt haben, machen wir hier noch mal einen kurzen Ausflug in die Statistik und schauen uns die Ausreißeranalyse an.

Vorhin haben wir einfach "stumpf" alle Flüge mit mehr als 120min Abweichung vom geplanten Zeitpunkt entfernt. Wenn man methodisch sauber arbeiten möchte, kann man das natürlich nicht einfach so machen.

Ausreißer sind Werte, die im Vergleich zu den restlichen Ausprägungen der Variable extrem hoch oder niedrig sind. Damit können einzelne Datenpunkte einen großen Einfluss auf Analysen und Ergebnisse nehmen.

Der Mittelwert ist beispielsweise sehr ausreißerempfindlich:

```{r}
mean(1:50) # Mittelwert der Zahlen 1 bis 50: 25.5

mean(c(1:50, 1000)) # Mittelwert der Zahlen 1 bis 50 und Ausreißer 1000: 44.6
```

Bei einer gründlichen statistischen Analyse gehört dazu, dass man sich neben den rein deskriptiven Eigenschaften der Variablen auch anschaut, ob es pro Variable Ausreißer gibt. Wenn man diese identifizieren kann, gibt es zwei Fragen: Warum ist es ein Ausreißer? Wie gehe ich damit um?

Im Prinzip gibt es zwei Möglichkeiten, warum ein Ausreißer existiert: Entweder es handelt sich um einen Messfehler, weil bspw. ein Komma falsch gesetzt wurde; oder es ist ein echter Extremwert, der zwar selten ist, aber genauso existieren kann. Der größte Mann, der je gelebt hat, Robert Wadlow, war mit seinen 2.72m auf jeden Fall ein Ausreißer, trotzdem war seine Größe ja real und valide.

Auf die zweite Frage, wie man mit Ausreißern/Extremwerten umgeht, gibt es keine allgemeingültige Antwort. Einfach entfernen darf man sie nicht. Die sauberste Lösung ist meistens, Analysen einmal mit und einmal ohne Extremwerte durchzuführen und zu schauen, ob sich die Ergebnisse denn wirklich ändern. Es gibt auch andere Ansätze, z.B. den Extremwert mit dem Mittelwert der Variable zu ersetzen, aber die genaue Vorgehensweise muss man von Fall zu Fall entscheiden und diese Ausführungen sind hier zu umfangreich.

Wir setzen hier den Fokus darauf, die Ausreißer erst einmal zu identifizieren.

## Grafische Ausreißersuche

Hier bieten sich zwei Plots an, die ihr schon kennt: Histogramme und Boxplots

```{r}
# Base
hist(dataset$late)

boxplot(dataset$late)


# ggplot
ggplot(dataset)+
  geom_histogram(aes(late), fill = palette1[1])+
  theme_minimal()

ggplot(dataset)+
  geom_boxplot(aes(late))+
  theme_minimal()

summary(dataset$late)
```

Im Boxplot werden potentielle Ausreißer mit den Punkten dargestellt, wenn sie das "IQR Kriterium" überschreiten. IQR steht für *interquartile range*, also Abstand zwischen dem ersten und zweiten Quantil. Das erste Quantil ist die Zahl, unter dem 25% der Werte liegen und das dritte Quantil die Zahl, über der 25% der Werte liegen. Von diesen Quantilgrenzen aus geht man noch mal weiter um 1.5\*IQR in beide Richtungen. Die Werte, die dann immer noch nicht im Bereich liegen, sind die potentiellen Ausreißer.

## Ausreißersuche mit base R

### Quantile & IQR

Das IQR-Kriterium lässt sich natürlich nicht nur im Boxplot anwenden, sondern auch selbst berechnen.

Dabei können uns Funktionen `quantile()` und `IQR()` nützen.

```{r}
# Funktionen ausprobieren
quantile(dataset$late, na.rm=T)

IQR(dataset$late, na.rm=T)
```

Mit diesen Funktionen können wir die Grenzen des IQR-Kriteriums bestimmen und als Filter für die Daten benutzen

```{r}
# Grenzen bestimmen
low <- quantile(dataset$late, na.rm=T)[2]-1.5*IQR(dataset$late, na.rm=T)
high <- quantile(dataset$late, na.rm=T)[4]+1.5*IQR(dataset$late, na.rm=T) 

# Probanden identifizieren, die Grenzen überschreiten
dataset %>% 
  filter(late < low | late > high) %>% 
  select(late, everything())
```

### boxplots.stats()

Netterweise gibt es auch eine Funktion zu den Daten hinter einem Boxplot, mit der wir die Werte der potentiellen Ausreißer direkt genannt bekommen: `boxplot.stats()`

Am interessantesten ist dabei die Spezifikation `$out`, die uns die potentiellen Ausreißer auflistet.

```{r}
#| eval: false
boxplot.stats(dataset$late)

out <- boxplot.stats(dataset$late)$out
```

Hier werden uns nur leider nicht direkt die Probanden-IDs oder Zeilennummern mitgeliefert.

### %in% und which()

Dabei können uns aber die Funktion `which()` und der `%in%`-Operator helfen, die auch allgemein nützlich sind, immer wenn es darum geht, bestimmte Werte in einer Tabelle wiederzufinden.

```{r}
#| eval: false

# Welche Elemente des Verspätung-Vektors entsprechen einem der Elemente aus dem out-Vektor?
dataset$late %in% out

# Welche Zeilen-Indices entsprechen diese Übereinstimmungen?
which(dataset$late %in% out)
# Ähnlich wie match(): Indices!

# Indices im Datensatz anwenden
dataset[which(dataset$late %in% out),] %>% 
  select(late, everything())
```

Warum benutzen wir hier `dataset$late %in% out` und nicht `out %in% dataset$late`?

```{r}
#| eval: false
dataset$late %in% out
# Checkt, was aus "$late" in "out" vorkommt -> Von allen Verspätungen, welche kommen im Ausreißer-Vektor vor?
# Genau das wollen wir wissen!

out %in% dataset$late
# Checkt, was aus "out" in "$late" vorkommt -> Von allen Ausreißern, welche kommen in den Verspätungen vor?
# Macht hier in dem Kontext wenig Sinn: Natürlich sind alle Ausreißer im normalen Dataframe enthalten.
# Kann aber in anderen Kontexten Sinn machen, z.B. wenn wir überprüfen wollen, ob ein bestimmter Wert überhaupt vorkommt ("Hast du einen Probanden in deiner Stichprobe, der genau 50 Jahre alt ist?")
```

> Frage: Können wir hier auch `match()` von letzter Woche benutzen? Warum oder warum nicht?

```{r}
#| eval: false
match(out, dataset$late)

dataset[match(out, dataset$late),]
```

Bei `match()` müssen wir beachten, dass die Funktion pro Element aus dem ersten Vektor nur das erste Match im zweiten Vektor sucht. Sollte es also zwei Ausreißer mit dem Wert "180" geben, würde beide Male nur der Index des zuerst vorkommenden Ausreißers genannt werden.

### scale()

Ein weiterer Ansatz kann sein, die Daten mit `scale()` zu standardisieren und dann zu überprüfen, welche Werte die Grenzen überschreiten, welche gemäß der Standardnormalverteilung wie folgt definiert sind:

-   außerhalb von -2 oder 2: selten

-   außerhalb von -3 oder 3: sehr selten

```{r}
# Demonstration mit "distance" (weil "late" noch keine sinnvollen Plots produziert)
ggplot(dataset)+
  geom_histogram(aes(distance), bins=50)+
  theme_minimal()+
  ggtitle("Distanz, nicht standardisiert")

dataset %>% 
  ggplot()+
  geom_histogram(aes(x=scale(distance), y = ..density..), bins = 50, fill = palette1[6])+
  stat_function(fun = dnorm,
                args = list(mean = 0,
                            sd = 1),
                color = palette1[4], size = 1)+
  geom_vline(aes(xintercept=-3), color=palette1[5], size=1, linetype="dashed")+
  geom_vline(aes(xintercept=3), color=palette1[5], size=1, linetype="dashed")+
  theme_minimal()+
  ggtitle("Distanz, standardisiert")
```

```{r}
dataset %>% 
  mutate(late.sc = scale(late)) %>%
  filter(late.sc > 3 | late.sc < -3) %>% 
  select(late, everything())

```

## Ausreißersuche mit dafür designten Packages

Neben diesen deskriptiven Ansätzen gibt es auch Signifikanz-Tests für die Ausreißeranalyse, die uns angeben, ob der extremste Wert ein Ausreißer ist oder nicht. Die hier vorgestellten basieren alle auf der Grundannahme, dass die Variable (abgesehen von den Ausreißern) normalverteilt ist.

Der `grubbs.test()` kommt aus dem `outlier`-Package. Je nach Einstellung testet er den höchsten oder niedrigsten Wert darauf, ob er ein Ausreißer ist. Die Nullhypothese ist dabei "Wert ist kein Ausreißer", also spricht ein signifikantes Ergebnis dafür, dass es sich um einen Ausreißer handelt.

```{r}
# höchsten Wert testen
grubbs.test(dataset$late)

# niedrigsten Wert testen
grubbs.test(dataset$late, opposite = T)
```

Der `dixon.test()` hat das gleiche Prinzip. Er eignet sich besonders gut für kleine samples mit maximal n = 30.

```{r}
data.small <- dataset[1:20,]

# höchsten Wert testen
dixon.test(data.small$late)

# niedrigsten Wert testen
dixon.test(data.small$late, opposite=T)
```

Wie man sieht, testen beide Tests immer nur einen Wert auf einmal. Allerdings konnten wir unserem Boxplot ja entnehmen, dass nicht nur der höchste Wert ein potentieller Ausreißer ist. Die Lösung dafür ist entweder, den Test zu wiederholen mit einem Datensatz, in dem der bereits identifizierte Ausreißer entfernt wurde, oder einen alternativen Test zu benutzen: `rosnerTest()` aus dem `EnvStats`-Package.

Wichtig zu beachten ist dabei, dass dieser Test sich eher für große Samples (n\>20) eignet. Außerdem müssen wir spezifizieren, wie viele potentielle Ausreißer wir erwarten. Standardmäßig werden drei Werte getestet. Wir können uns gut am Ergebnis von `boxplot.stats` von vorhin orientieren.

```{r}
rosnerTest(dataset$late, k=length(out))

rosnerTest(dataset$late, k=length(out))$all.stats
```

Angenehm an dem `$all.stats`-Output ist, dass er die Werte automatisch nach "Extremität" bzw. Ausreißer/nicht-Ausreißer sortiert.

Da das Ergebnis ein Dataframe ist, können wir weiter filtern, was bei so vielen getesteten Werten praktisch ist:

```{r}
rosnerTest(dataset$late, k=length(out))$all.stats %>% 
  filter(Outlier == TRUE)

```

Wir können sehen, dass es anscheinend immer noch zwei unterschiedliche Arten von Ausreißern gibt: Die zwischen 142 und 1426 Minuten, die immerhin einer Veränderung von ca. 2 bis 24 Stunden entsprechen, und diejenigen, deren Wert über 3 Millionen ist - was einer Zeit von etwa sieben Jahren entspricht und realistisch gesehen keine echten Verspätungen repräsentieren kann.

Um die Daten noch mal sinnvoll für den Plot von vorhin zu filtern, schließen wir daher die "unrealistischen" Verspätungen aus.

```{r}
# Dataframe erstellen, der nur noch "unrealistische" Werte enthält
outlier.res <- rosnerTest(dataset$late, k=length(out))$all.stats %>% 
  filter(Outlier == TRUE & sqrt(Value^2) > 3000000)

dataset %>% 
  filter(!dataset$late %in% outlier.res$Value) %>% 
  select(late, everything()) %>% 
  ggplot(aes(x=late))+
  geom_bar(fill=palette1[3])+
  geom_vline(xintercept=0,linetype="dashed")+
  theme_classic()
```

Rein statistisch gesehen sind die Randwerte im Plot immer noch Ausreißer. Für den Plot, in dem wir einfach die Häufigkeiten der Verspätung darstellen wollen, ist diese Datenauswahl aber in Ordnung. Wie man mit Ausreißern umgeht und ob man sie entfernen darf, hängt also immer vom Ziel und der Fragestellung ab.

## Aufgabe

Führt selbst eine Ausreißeranalyse für die Variable `distance` aus dem Datensatz durch.

Zur Übersicht:

-   Plots mit `boxplot`, `geom_boxplot`, `hist`, `geom_histogram`

-   Wertebereich definieren mit `quantile`, `IQR`, `boxplots.stats`

-   Ausreißer testen mit `grubb.test`, `dixon.test`, `rosnerTest`

-   evtl. unterstützende Funktionen: `which`, `%in%`

```{r}
# Plot
dataset %>% 
  ggplot+
  geom_boxplot(aes(distance))

# Boxplot-Markierungen
out2 <- boxplot.stats(dataset$distance)$out

# Ausreißer testen
outlier.res2 <- rosnerTest(dataset$distance, k=length(out2))$all.stats
# alle werden als Ausreißer identifiziert
```

Alle Distanzen im 5.000-Meilen-Bereich werden als Ausreißer markiert und über den Test bestätigt.

> Frage: Macht ein Ausschluss an dieser Stelle Sinn? Wie können wir das herausfinden?

Wohin gehen die Flüge eigentlich?

```{r}
data.outlier <- dataset %>% 
  filter(distance %in% outlier.res2$Value)
  
summary(as.factor(data.outlier$dest))
```

Alle Ausreißer-Flüge gehen nach "HNL" - Wofür könnte das stehen?

```{r}
?flights
```

Mehr Info über `dest` bekommen wir über den Datensatz `airports`

```{r}
?airports

airports %>% 
  filter(faa == "HNL")
```

Aha, die Flügen gehen alle nach Honolulu! Also sind es tatsächlich "echte" Daten.

Wir würden sie also nicht ohne weiteres entfernen - allerdings könnte es für bestimmte Plots oder Analysen Sinn machen, diesen Flughafen auszuklammern. Das sollte aber natürlich begründet und angemerkt werden.
